name: 'Trigger New Relic - Release Event'
description: 'Trigger the Release Event in New Relic Dashboard'
inputs:
  release-artifact:
    description: 'The name for the database or artifact that has been deployed. Ex. PayrollSuperannuation'
    required: true
  environment:
    description: 'The name of the environment to display in New Relic.'
    required: true
  new-relic-app-key:
    description: 'The Account ID for the New Relic.'
    required: true
  new-relic-api-key:
    description: 'The API key for New Relic Insights.'
    required: true
  deployer:
    description: 'Returns the username of the person or app that triggered the workflow run.'
    required: true
  owner:
    description: 'The owner of the NR Release Event. A mandatory field for the JSON Parameters.'
    required: true
  release-number:
    description: 'Release Number of the build'
    required: true
  github-run-url:
    description: 'Github Run link'
    required: true
  target-servers:
    description: 'Target Servers'
    required: true

runs:
  using: composite
  steps:
  - name: Trigger the New Relic Release Event
    shell: powershell
    run: |
      # Assign GitHub Action inputs to PowerShell variables
      $deployer = "${{ inputs.deployer }}"
      $servers = "${{ inputs.target-servers }}"
      $releaseNumber = "${{ inputs.release-number }}"
      $githubRunUrl = "${{ inputs.github-run-url }}"
      $artifact = "${{ inputs.release-artifact }}"
      $environment = "${{ inputs.environment }}"
      $owner = "${{ inputs.owner }}"
      $apiKey = "${{ inputs.new-relic-api-key }}"
      $accountId = "${{ inputs.new-relic-app-key }}"  # This must be a numeric New Relic account ID

      # Construct the event text in Markdown
      $eventStreamText = @"
      **Deployer:** $deployer
      **Server:** $servers
      **Link:** [Release $releaseNumber]($githubRunUrl)
      "@

      # Construct the payload
      $parameters = @{
        "eventType"        = "ReleaseEvent"
        "title"            = "Released $artifact database to $environment"
        "text"             = $eventStreamText
        "env.name"         = $environment
        "deploymentengine" = "GitHub Action"
        "product"          = $artifact
        "owner"            = $owner
        "deployer"         = $deployer
      }

      # Convert to JSON
      $params_json = $parameters | ConvertTo-Json -Depth 3
      # Write-Host "`nJSON Payload to be sent:"
      # Write-Host $params_json

      # New Relic event API endpoint
      $newrelic_url = "https://insights-collector.newrelic.com/v1/accounts/$accountId/events"
      Write-Host "`nSending request to New Relic URL: $newrelic_url"

      # Send the request using Invoke-RestMethod
      try {
        $response = Invoke-RestMethod -Uri $newrelic_url `
                                      -Headers @{ "X-Insert-Key" = $apiKey } `
                                      -ContentType "application/json" `
                                      -Method POST `
                                      -Body $params_json

        Write-Host "`nSuccessfully sent event to New Relic."
        Write-Host "Response: $response"
      } catch {
        Write-Host "`nError occurred: $($_.Exception.Message)"
        if ($_.Exception.Response) {
          $reader = [System.IO.StreamReader]::new($_.Exception.Response.GetResponseStream())
          $body = $reader.ReadToEnd()
          Write-Host "`nError Response from New Relic:"
          Write-Host $body
        }
        throw
      }
