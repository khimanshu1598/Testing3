# Invoke SQL Actions

Executes `sql-actions.ps1` on remote EC2 instances via AWS SSM to perform SQL user management operations.

## Inputs

| Name | Description | Required | Default | Valid Values |
|------|-------------|----------|---------|--------------|
| `sql-password-parameter-store` | AWS SSM Parameter Store name containing SQL password | Yes | - | - |
| `db-name` | Target database name | Yes | - | - |
| `sql-user-name` | SQL user to create/manage | Yes | - | - |
| `sql-activity` | Operation to perform | Yes | - | `create-user`, `validate-delete-user`, `delete-user` |
| `destination-path` | Remote path to `sql-actions.ps1` | Yes | - | - |
| `aws-region` | AWS region of target instances | Yes | - | - |
| `username` | Domain user in `domain\user` format | Yes | - | - |
| `needs-windows-authentication` | Use Windows Auth instead of SQL Auth | Yes | `true` | `true`, `false` |

## Prerequisites

1. **MATRIX_INSTANCE_LIST** environment variable must be set (from previous step)
2. AWS credentials with permissions to:
   - `ssm:GetParameter`
   - `ssm:SendCommand`
   - `ssm:ListCommandInvocations`
3. Target EC2 instances must have SSM agent installed

## Example Usage

```yaml
- uses: paassql-pipelines/invoke-sql-actions@v1
  with:
    sql-password-parameter-store: '/prod/db/password'
    db-name: 'customer_db'
    sql-user-name: 'github_actions_user'
    sql-activity: 'create-user'
    destination-path: 'C:\scripts'
    aws-region: 'us-east-1'
    username: 'DOMAIN\svc_github'
    needs-windows-authentication: true
  env:
    MATRIX_INSTANCE_LIST: ${{ steps.previous-step.outputs.MATRIX_INSTANCE_LIST }}
```

## Supported Runners

- **Linux**: Requires PowerShell Core and AWS CLI
- **Windows**: Native PowerShell support

## Error Handling

The action will fail if:
- Any required input is missing
- SSM command execution fails
- SQL script returns errors
- Invalid activity type is specified
- AWS permissions are insufficient


==========

runs:
  using: composite
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        # Required inputs validation
        if [ -z "${{ inputs.sql-password-parameter-store }}" ]; then
          echo "::error::sql-password-parameter-store is required"
          exit 1
        fi
        
        if [ -z "${{ inputs.db-name }}" ]; then
          echo "::error::db-name is required"
          exit 1
        fi
        
        if [ -z "${{ inputs.sql-user-name }}" ]; then
          echo "::error::sql-user-name is required"
          exit 1
        fi
        
        if [ -z "${{ inputs.sql-activity }}" ]; then
          echo "::error::sql-activity is required"
          exit 1
        fi
        
        if [[ ! "${{ inputs.sql-activity }}" =~ ^(create-user|validate-delete-user|delete-user)$ ]]; then
          echo "::error::Invalid sql-activity. Must be one of: create-user, validate-delete-user, delete-user"
          exit 1
        fi
        
        if [ -z "${{ inputs.destination-path }}" ]; then
          echo "::error::destination-path is required"
          exit 1
        fi
        
        if [ -z "${{ inputs.aws-region }}" ]; then
          echo "::error::aws-region is required"
          exit 1
        fi
        
        if [ -z "${{ inputs.username }}" ]; then
          echo "::error::username is required"
          exit 1
        fi
        
        if [[ ! "${{ inputs.needs-windows-authentication }}" =~ ^(true|false)$ ]]; then
          echo "::error::needs-windows-authentication must be either 'true' or 'false'"
          exit 1
        fi
        
        if [ -z "$MATRIX_INSTANCE_LIST" ]; then
          echo "::error::MATRIX_INSTANCE_LIST environment variable is required"
          exit 1
        fi
