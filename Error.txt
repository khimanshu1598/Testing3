name: 'Deploy and extract packages from JFrog artifactory'
description: 'Deploy and extract the JFrog artifactories which are required for the DACPAC deployment.'
inputs:
  nuget-pkg-download-path:
    description: 'Download Path where the latest NuGet package will be downloaded'
    required: true
  nuget-pkg-extract-path:
    description: 'Extract Path where the latest NuGet package will be extracted'
    required: true
  package-name:
    description: 'The name of JFrog artifactory which is downloaded'
    required: true
  webrequest-uri:
    description: 'The URL from where the package needs to be downloaded'
    required: true

runs:
  using: "composite"
  steps:
  - name: Deploy NuGet Package
    shell: powershell
    run: |
      
      # Remove any existing files in the download folder (if any)
      if (Test-Path -Path ${{ inputs.nuget-pkg-download-path }}) {
          Write-Host "Cleaning up the download folder"
          Remove-Item -Path "${{ inputs.nuget-pkg-download-path }}\*" -Recurse -Force
      } else {
          Write-Host "Creating new download folder"
          New-Item -ItemType Directory -Path ${{ inputs.nuget-pkg-download-path }} -Force
      }
        # # Check if the folder exists, and if not, create it
        # if (-not (Test-Path -Path ${{ inputs.nuget-pkg-download-path }})) {
        #     New-Item -ItemType Directory -Path ${{ inputs.nuget-pkg-download-path }} -Force
        #     Write-Host "Created ${{ inputs.nuget-pkg-download-path }} folder."
        # } else {
        #     Write-Host "${{ inputs.nuget-pkg-download-path }} folder already exists."
        # }


        Invoke-WebRequest -Uri "${{ inputs.webrequest-uri }}\${{ inputs.package-name }}" -OutFile "${{ inputs.nuget-pkg-download-path }}\${{ inputs.package-name }}" 
        Get-ChildItem -Path ${{ inputs.nuget-pkg-download-path }} -Filter *.nupkg | Select-Object FullName

  - name: Extract .nupkg to employee invitation DB packages
    run: |
      # Ensure the extraction folder exists and is empty

      # Remove any existing files in the extraction folder (if any)
      if (Test-Path -Path ${{ inputs.nuget-pkg-extract-path }}) {
          Write-Host "Cleaning up the extraction folder"
          Remove-Item -Path "${{ inputs.nuget-pkg-extract-path }}\*" -Recurse -Force
      } else {
          Write-Host "Creating new extraction folder"
          New-Item -ItemType Directory -Path ${{ inputs.nuget-pkg-extract-path }} -Force
      }

      #Get the first .nupkg file in the directory
      $nupkg = Get-ChildItem -Path ${{ inputs.nuget-pkg-download-path }} -Filter *.nupkg | Select-Object -First 1

      if ($nupkg -eq $null) {
        Write-Error "No .nupkg file found in the directory!"
        exit 1
      }

      Write-Host "Found .nupkg file: $($nupkg.FullName)"

      #Load ZIP Utility and extract the .nupkg file
      Add-Type -AssemblyName System.IO.Compression.FileSystem
      [System.IO.Compression.ZipFile]::ExtractToDirectory($nupkg.FullName, "${{ inputs.nuget-pkg-extract-path }}")

      Write-Host "Extracted $($nupkg.Name) to ${{ inputs.nuget-pkg-extract-path }}"
      # Get-ChildItem -Path ${{ inputs.nuget-pkg-extract-path }} -Recurse
      # Get-Content "${{ inputs.nuget-pkg-extract-path }}\\abc-uat.publish.xml"
    shell: powershell

  - name: Files Present in Nuget Package
    run: |
      echo "Listing files in dacpacs directory:"
      ls -l "${{ github.workspace }}/packages"
    shell: bash
