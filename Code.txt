name: 'Transfer script to target server'
description: 'Uses AWS SSM to transfer script sql-actions.ps1 to the target server.'

inputs:
  file-path:
    description: 'Path of the scripts in GHA Runner to send to target server'
    required: true
  destination-path:
    description: 'Path on the target server where script needs to be added'
    required: true
  aws-region:
    description: 'AWS region details'
    required: true

runs:
  using: composite
  steps:

  - name: Run AWS SSM send command to transfer file tp target server
    id: transfer-file-to-ec2
    shell: bash
    run: |
      
      # Encode the file in base64 (no line wrapping)
      ENCODED=$(base64 -w 0 "${{ inputs.file-path }}")

      # Build the PowerShell command to run remotely
      PS_COMMAND="\$b64='$ENCODED'; \
      if (Test-Path "${{ inputs.destination-path }}") { if (Test-Path "${{ inputs.destination-path }}-sql-actions.ps1") { Remove-Item "${{ inputs.destination-path }}-sql-actions.ps1" -Force; Write-Output 'FILE_DELETED' } } else { New-Item -Path "${{ inputs.destination-path }}" -ItemType Directory | Out-Null }; \
      \$decoded=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\$b64)); \
      Set-Content -Path "${{ inputs.destination-path }}-sql-actions.ps1" -Value \$decoded -Force"

      #If only since instance is passed in MATRIX_LIST_INSTANCE, convert it into a list
      matrixJson="$MATRIX_INSTANCE_LIST"
      if [[ "$matrixJson" != \[* ]]; then
        echo "Wrapping single JSON object in an array..."
        matrixJson=$(echo "$matrixJson" | jq -c '[.]')
      fi
      echo "Raw MATRIX_INSTANCE_LIST: $matrixJson"


      echo "$matrixJson" | jq -c '.[]' | while read -r item; do
        instance=$(echo "$item" | jq -r '.instance')
        dbServer=$(echo "$item" | jq -r '.dbServerName')
        role=$(echo "$item" | jq -r '.role')

        echo "----------------------------------"
        echo "Transferring Powershell scripts - Instance: $instance, Role: $role, DB Server: $dbServer"

        # Send it to EC2 via SSM
        aws ssm send-command \
          --document-name "AWS-RunPowerShellScript" \
          --instance-ids "$instance" \
          --region "${{ inputs.aws-region }}" \
          --comment "Uploading sql-actions.ps1 via GitHub Actions" \
          --parameters "commands=[\"$PS_COMMAND\"]" \
          --query "Command.CommandId" \
          --output text
      done
=================
Transferring Powershell scripts - Instance: i-01e71fe412312412412412, Role: primary, DB Server: GSQN-76FZVN.uat.aws.abc.com
09843d29-c82a-45c0-a55d-5a5e6838bc01
Prepare all required actions
Run ./.github/actions/invoke-sql-actions
Run #Fetch sql-user password from parameter store
  
----------------------------------
Sending to - Instance: i-01e71fe412312412412412, Role: primary, DB Server: GSQN-76FZVN.uat.aws.abc.com for validate-delete-user
Run matrixJson="$MATRIX_INSTANCE_LIST"
  
Command ID generated: 722b1d2d-7f0c-4eb1-b9ee-2e1b3fdac34c
SSM command sent successfully!
Error detected in the command output:
Windows PowerShell 
Copyright (C) 2016 Microsoft Corporation. All rights reserved.
----------ERROR-------
The argument 'C:\Temp\EmployeeInvitation\sql-actions.ps1' to the -File parameter does not exist. Provide the path to an existing '.ps1' file as an argument to the -File parameter.
Error: Process completed with exit code 1.
===================

if (Test-Path "${{ inputs.destination-path }}") { if (Test-Path "${{ inputs.destination-path }}-sql-actions.ps1") 

What is is checking if the inputs.destination-path value is       destination-path: 'C:\\Temp\\EmployeeInvitation'


==============

    - name: Create a new SQL User
      id: create-user
      uses: ./.github/actions/validate-create-sql-user
      with:
        file-path: '${{ env.OD_GHA_FILE_PATH }}/sql-actions.ps1'
        destination-path: 'C:\\Temp\\EmployeeInvitation'
        aws-region: ${{ env.AWS_REGION }}
        sql-password-parameter-store: ${{ env.SQL_PASSWORD_PARAMETER_STORE }}
        db-name: ${{ env.DB_NAME }}
        sql-user-name: ${{ env.SQL_USER_NAME }}

====================

name: 'Transfer script to target server'
description: 'Uses AWS SSM to transfer script sql-actions.ps1 to the target server.'

inputs:
  file-path:
    description: 'Path of the scripts in GHA Runner to send to target server'
    required: true
  destination-path:
    description: 'Folder path on the target server where the script will be placed'
    required: true
  aws-region:
    description: 'AWS region details'
    required: true

runs:
  using: composite
  steps:

    - name: Transfer script to target EC2 server via SSM
      id: transfer-file-to-ec2
      shell: bash
      run: |
        set -e

        # Encode the file in base64 (no line wrapping)
        ENCODED=$(base64 -w 0 "${{ inputs.file-path }}")

        # Build the PowerShell command
        PS_COMMAND="\$b64='$ENCODED'; \
        if (!(Test-Path '${{ inputs.destination-path }}')) { New-Item -Path '${{ inputs.destination-path }}' -ItemType Directory | Out-Null }; \
        \$scriptPath = Join-Path '${{ inputs.destination-path }}' 'sql-actions.ps1'; \
        if (Test-Path \$scriptPath) { Remove-Item \$scriptPath -Force; Write-Output 'FILE_DELETED' }; \
        \$decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\$b64)); \
        Set-Content -Path \$scriptPath -Value \$decoded -Force; \
        Write-Output 'FILE_UPLOADED'"

        # Normalize matrix list
        matrixJson="$MATRIX_INSTANCE_LIST"
        if [[ "$matrixJson" != \[* ]]; then
          echo "Wrapping single JSON object in an array..."
          matrixJson=$(echo "$matrixJson" | jq -c '[.]')
        fi

        echo "Raw MATRIX_INSTANCE_LIST: $matrixJson"

        # Loop through instances
        echo "$matrixJson" | jq -c '.[]' | while read -r item; do
          instance=$(echo "$item" | jq -r '.instance')
          dbServer=$(echo "$item" | jq -r '.dbServerName')
          role=$(echo "$item" | jq -r '.role')

          echo "----------------------------------"
          echo "Transferring Powershell script - Instance: $instance, Role: $role, DB Server: $dbServer"

          # Send file to EC2 via SSM
          command_id=$(aws ssm send-command \
            --document-name "AWS-RunPowerShellScript" \
            --instance-ids "$instance" \
            --region "${{ inputs.aws-region }}" \
            --comment "Uploading sql-actions.ps1 via GitHub Actions" \
            --parameters "commands=[\"$PS_COMMAND\"]" \
            --query "Command.CommandId" \
            --output text)

          echo "Command ID generated: $command_id"
        done

