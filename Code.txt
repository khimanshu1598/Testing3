# Final corrected sqlpackage-runner-fixed.ps1

param (
    [string]$Action,
    [string]$DacpacPath,
    [string]$PublishProfilePath = "",
    [string]$ServerInstance,
    [string]$DatabaseName,
    [string]$UserName,
    [string]$Password,
    [string]$SqlPackagePath,
    [string]$OutputPath = "",
    [string]$UseMultiSubnetFailover,
    [string]$SQLPackageDeployProperties,
    [string]$SQLCmdVariables = "",
    [string]$SQLPackageParameters = ""
)

$ErrorActionPreference = "Stop"

Write-Host "Script started. Action: $Action"

# Validate sqlpackage.exe
if (-not (Test-Path $SqlPackagePath)) {
    throw "sqlpackage.exe not found at: $SqlPackagePath"
}

# Ensure output folder exists
if ($OutputPath -ne "") {
    $folder = Split-Path -Path $OutputPath -Parent
    if (-not (Test-Path $folder)) {
        Write-Host "Creating output directory: $folder"
        New-Item -Path $folder -ItemType Directory -Force | Out-Null
    }
}

# Build connection string
$ConnectionString = "Server=$ServerInstance;Database=$DatabaseName;User=$UserName;Password=$Password;Encrypt=True;TrustServerCertificate=True;"
if ($UseMultiSubnetFailover) { $ConnectionString += "multisubnetfailover=true;" }

# Initialize collections
$sqlCmdVariableCollection = @{}
$sqlPackageParameterCollection = @{}
$sqlPackagePropertyCollection = @{}

# Update SQLCmdVariables if contains #{Octopus.Release.Number}
if (![string]::IsNullOrWhiteSpace($SQLCmdVariables)) {
    $SQLCmdVariables = $SQLCmdVariables -replace '#{Octopus.Release.Number}', $ReleaseNumber
    try {
        $sqlCmdVariableCollection = ConvertFrom-Json $SQLCmdVariables
        $sqlCmdVariableCollection = @{} + $sqlCmdVariableCollection
        Write-Host "Parsed SqlCmdVariables successfully."
    } catch {
        Write-Warning "Failed to parse SqlCmdVariables. Skipping."
    }
} else {
    Write-Host "SqlCmdVariables is empty."
}

# Parse SQLPackageParameters
if (![string]::IsNullOrWhiteSpace($SQLPackageParameters)) {
    try {
        $sqlPackageParameterCollection = ConvertFrom-Json $SQLPackageParameters
        $sqlPackageParameterCollection = @{} + $sqlPackageParameterCollection
        Write-Host "Parsed SqlPackageParameters successfully."
    } catch {
        Write-Warning "Failed to parse SQLPackageParameters. Skipping."
    }
} else {
    Write-Host "SqlPackageParameters is empty."
}

# Parse SQLPackageDeployProperties
if (![string]::IsNullOrWhiteSpace($SQLPackageDeployProperties)) {
    try {
        $sqlPackagePropertyCollection = ConvertFrom-Json $SQLPackageDeployProperties
        $sqlPackagePropertyCollection = @{} + $sqlPackagePropertyCollection
        Write-Host "Parsed SQLPackageDeployProperties successfully."
    } catch {
        Write-Warning "Failed to parse SQLPackageDeployProperties. Falling back to raw string."
    }
} else {
    Write-Host "SQLPackageDeployProperties is empty."
}

# Helper Functions
function Format-SqlCmdVariables {
    param (
        [AllowNull()][Parameter(Mandatory=$true)][hashtable]$SqlCmdVariables
    )
    $result = @()
    if ($SqlCmdVariables -ne $null) {
        foreach ($variable in $SqlCmdVariables.GetEnumerator()) {
            $result += "/v:$($variable.Name)='$($variable.Value)'"
        }
    }
    return $result
}

function Format-SqlPackageParameters {
    param (
        [AllowNull()][Parameter(Mandatory=$true)][hashtable]$Parameters
    )
    $result = @()
    if ($Parameters -ne $null) {
        foreach ($variable in $Parameters.GetEnumerator()) {
            $result += "/$($variable.Name):'$($variable.Value)'"
        }
    }
    return $result
}

function Format-SqlPackageProperties {
    param (
        [AllowNull()][Parameter(Mandatory=$true)][hashtable]$Properties
    )
    $result = @()
    if ($Properties -ne $null) {
        foreach ($variable in $Properties.GetEnumerator()) {
            $result += "/p:$($variable.Name)='$($variable.Value)'"
        }
    }
    return $result
}

# Initialize params
$params = @()

switch ($Action.ToLower()) {
    "extract" {
        if (-not $OutputPath) { throw "OutputPath is required for Extract" }
        $params = @(
            "/Action:Extract",
            "/TargetFile:$OutputPath",
            "/SourceConnectionString:$ConnectionString"
        )
        $params += Format-SqlPackageProperties -Properties $sqlPackagePropertyCollection
    }
    "deployreport" {
        if (-not $OutputPath -or -not $DacpacPath) { throw "OutputPath and DacpacPath required for DeployReport" }
        $params = @(
            "/Action:DeployReport",
            "/SourceFile:$DacpacPath",
            "/TargetConnectionString:$ConnectionString",
            "/OutputPath:$OutputPath"
        )
        if ($PublishProfilePath) { $params += "/Profile:$PublishProfilePath" }
        $params += Format-SqlCmdVariables -SqlCmdVariables $sqlCmdVariableCollection
        $params += Format-SqlPackageParameters -Parameters $sqlPackageParameterCollection
        $params += Format-SqlPackageProperties -Properties $sqlPackagePropertyCollection
    }
    "script" {
        if (-not $OutputPath -or -not $DacpacPath) { throw "OutputPath and DacpacPath required for Script" }
        $params = @(
            "/Action:Script",
            "/SourceFile:$DacpacPath",
            "/TargetConnectionString:$ConnectionString",
            "/OutputPath:$OutputPath"
        )
        if ($PublishProfilePath) { $params += "/Profile:$PublishProfilePath" }
        $params += Format-SqlCmdVariables -SqlCmdVariables $sqlCmdVariableCollection
        $params += Format-SqlPackageParameters -Parameters $sqlPackageParameterCollection
        $params += Format-SqlPackageProperties -Properties $sqlPackagePropertyCollection
    }
    "publish" {
        if (-not $DacpacPath) { throw "DacpacPath required for Publish" }
        $params = @(
            "/Action:Publish",
            "/SourceFile:$DacpacPath",
            "/TargetConnectionString:$ConnectionString"
        )
        if ($PublishProfilePath) { $params += "/Profile:$PublishProfilePath" }
        $params += Format-SqlCmdVariables -SqlCmdVariables $sqlCmdVariableCollection
        $params += Format-SqlPackageParameters -Parameters $sqlPackageParameterCollection
        $params += Format-SqlPackageProperties -Properties $sqlPackagePropertyCollection
    }
    default { throw "Unsupported Action: $Action" }
}

# Execute sqlpackage
Write-Host "Running sqlpackage.exe with parameters: $($params -join ' ')"

$maxRetries = 3
$retryDelaySeconds = 5
$attempt = 1
$success = $false

while ($attempt -le $maxRetries -and -not $success) {
    Write-Host "Attempt ${attempt} of ${maxRetries}: Running sqlpackage.exe..."
    try {
        & $SqlPackagePath @params
        if ($LASTEXITCODE -eq 0) {
            $success = $true
            Write-Host "sqlpackage executed successfully on attempt $attempt"
        } else {
            throw "sqlpackage failed with exit code $LASTEXITCODE"
        }
    } catch {
        Write-Warning "sqlpackage failed on attempt ${attempt}: $_"
        if ($attempt -lt $maxRetries) {
            Write-Host "Retrying in $retryDelaySeconds seconds..."
            Start-Sleep -Seconds $retryDelaySeconds
        } else {
            throw "sqlpackage failed after $maxRetries attempts."
        }
    }
    $attempt++
}

Write-Host "Script completed successfully"
