# üöÄ Run DACPAC Deployment using sqlpackage.exe

This GitHub Action runs `sqlpackage.exe` commands to perform operations like `extract`, `deployreport`, `script`, and `publish` on SQL Server databases. It supports dynamic parameter substitution, output file path generation, and JSON-formatted SQLCMD variables.

---

## üì• Inputs

| Name                       | Description                                                                                                 | Required | Default |
|----------------------------|-------------------------------------------------------------------------------------------------------------|----------|---------|
| `ArtifactDownloadPath`     | Path where the artifacts like reports/scripts will be stored                                                | Yes      | ‚Äì       |
| `DatabaseName`             | The name of the target database                                                                             | Yes      | ‚Äì       |
| `ReleaseNumber`            | The current release number                                                                                  | Yes      | ‚Äì       |
| `FileName`                 | Output file name (e.g. `.sql` or `.xml`)                                                                    | Yes      | ‚Äì       |
| `targetServer`             | Target SQL Server instance                                                                                  | Yes      | ‚Äì       |
| `Action`                   | One of: `extract`, `deployreport`, `script`, `publish`                                                      | Yes      | ‚Äì       |
| `PublishProfileFilePath`   | Full path to the SQL Server publish profile XML                                                             | Yes      | ‚Äì       |
| `GithubActor`              | GitHub actor that triggered the workflow                                                                    | Yes      | ‚Äì       |
| `SQLPackageDeployProperties`| JSON object of SQLPackage properties (e.g. `{"BlockOnPossibleDataLoss":"False"}`)                           | Yes      | ‚Äì       |
| `SQLCMDVariables`          | JSON object of SQLCMD variables (e.g. `{"env":"dev","region":"us"}`)                                        | Yes      | ‚Äì       |
| `SQLPackageParameters`     | JSON object of SQLPackage CLI parameters (e.g. `{"Action":"Publish"}`)                                      | Yes      | ‚Äì       |
| `SqlPackagePath`           | Path to `sqlpackage.exe`                                                                                    | Yes      | ‚Äì       |
| `DacpacPath`               | [Optional] Path to `.dacpac` file to deploy                                                                 | No       | ‚Äì       |
| `UserName`                 | SQL Server username                                                                                         | Yes      | ‚Äì       |
| `UseMultiSubnetFailover`   | Adds `MultiSubnetFailover=True` to connection string                                                        | Yes      | ‚Äì       |

---

## üñ•Ô∏è Supported Runners

- `windows-latest`

> This action depends on `sqlpackage.exe` and PowerShell, and is supported only on Windows runners.

---

## üîê Required Permissions

- No special GitHub permissions are required.
- Ensure credentials used in the workflow have access to the SQL Server target.

---

## ‚ñ∂Ô∏è Example Usage

```yaml
- name: Run DACPAC Deployment
  uses: ./paassql-pipelines/run-dacpac-deployment
  with:
    ArtifactDownloadPath: './output'
    DatabaseName: 'mydatabase'
    ReleaseNumber: 'v1.2.3'
    FileName: 'release.sql'
    targetServer: 'sql.mycompany.internal'
    Action: 'publish'
    PublishProfileFilePath: './profiles/dev.publish.xml'
    GithubActor: ${{ github.actor }}
    SQLPackageDeployProperties: '{"BlockOnPossibleDataLoss":"False"}'
    SQLCMDVariables: '{"env":"dev","region":"us"}'
    SQLPackageParameters: '{"Action":"Publish"}'
    SqlPackagePath: 'C:\\tools\\sqlpackage'
    DacpacPath: './packages/db.dacpac'
    UserName: 'sqladmin'
    UseMultiSubnetFailover: 'true'


#####################################

name: 'Build Output path and Run the DACPAC Deployment script'
description: 'Uses sqlpackage.exe to run DACPAC operations like DeployReport, Script, Extract, and Publish.'

inputs:
  ArtifactDownloadPath:
    description: 'Path where the Artifacts will be stored'
    required: true
  DatabaseName:
    description: 'The database name the DACPAC is being applied against'
    required: true
  ReleaseNumber:
    description: 'Release Number of the build'
    required: true
  FileName:
    description: 'The name of Output File'
    required: true
  targetServer:
    description: 'The host to deploy the DACPAC to'
    required: true
  Action:
    description: 'The action to have sqlpackage.exe execute. One of: extract, deployreport, script, publish'
    required: true
  PublishProfileFilePath:
    description: 'The fully qualified path and file name of the Publish Profile to be applied against the supplied DACPAC'
    required: true
  GithubActor:
    description: 'Returns the username of the person or app that triggered the workflow run.'
    required: true
  SQLPackageDeployProperties:
    description: 'Collection of SQLPackage.exe Properties in JSON format'
    required: true
  SQLCMDVariables:
    description: 'Collection of SQLCMD Variables in JSON format'
    required: true
  SQLPackageParameters:
    description: 'Collection of SQLPackage.exe Parameters in JSON format'
    required: true
  SqlPackagePath:
    description: 'Path to sqlpackage.exe'
    required: true
  DacpacPath:
    description: '[Optional] Fully qualified path to the DACPAC to publish.'
    required: false
  UserName:
    description: 'SQL username to be used for performing actions'
    required: true
  UseMultiSubnetFailover:
    description: 'Add MultiSubnetFailover=True to the connection string'
    required: true

runs:
  using: composite
  steps:
    - name: Validate Required Inputs
      shell: powershell
      run: |
        $requiredInputs = @(
          'ArtifactDownloadPath',
          'DatabaseName',
          'ReleaseNumber',
          'FileName',
          'targetServer',
          'Action',
          'PublishProfileFilePath',
          'SQLPackageDeployProperties',
          'SQLCMDVariables',
          'SQLPackageParameters',
          'SqlPackagePath',
          'UserName',
          'UseMultiSubnetFailover'
        )

        foreach ($input in $requiredInputs) {
          if (-not (Get-Item -Path "env:${input}")) {
            Write-Error "‚ùå Required input '$input' not provided."
            exit 1
          }
        }

    - name: Build Output path and Run the DACPAC Deployment script
      shell: powershell
      env:
        ArtifactDownloadPath: ${{ inputs.ArtifactDownloadPath }}
        DatabaseName: ${{ inputs.DatabaseName }}
        ReleaseNumber: ${{ inputs.ReleaseNumber }}
        FileName: ${{ inputs.FileName }}
        targetServer: ${{ inputs.targetServer }}
        Action: ${{ inputs.Action }}
        PublishProfileFilePath: ${{ inputs.PublishProfileFilePath }}
        GithubActor: ${{ inputs.GithubActor }}
        SQLPackageDeployProperties: ${{ inputs.SQLPackageDeployProperties }}
        SQLCMDVariables: ${{ inputs.SQLCMDVariables }}
        SQLPackageParameters: ${{ inputs.SQLPackageParameters }}
        UseMultiSubnetFailover: ${{ inputs.UseMultiSubnetFailover }}
        SqlPackagePath: ${{ inputs.SqlPackagePath }}
        DacpacPath: ${{ inputs.DacpacPath }}
        UserName: ${{ inputs.UserName }}
      run: |
        function Format-JsonAsKeyValue {
            param ([string]$jsonString)
            if ([string]::IsNullOrWhiteSpace($jsonString)) { return "" }
            try {
              $json = $jsonString | ConvertFrom-Json
              if (-not $json) { return "" }
            } catch {
              Write-Host "‚ö†Ô∏è Invalid JSON format."
              return ""
            }
            return ($json.psobject.Properties | ForEach-Object { "$($_.Name)=$($_.Value)" }) -join ","
        }

        $SQLCMDVariablesUpdated = $env:SQLCMDVariables -replace '#{Octopus.Release.Number}', $env:ReleaseNumber
        $DeployProps = Format-JsonAsKeyValue $env:SQLPackageDeployProperties
        $CMDVars = Format-JsonAsKeyValue $SQLCMDVariablesUpdated
        $Params = Format-JsonAsKeyValue $env:SQLPackageParameters

        $matrixJson = "$env:MATRIX_INSTANCE_LIST"
        if (-not $matrixJson.StartsWith('[')) {
          $matrixJson = @($matrixJson | ConvertFrom-Json) | ConvertTo-Json -Compress
        }
        $parsedMatrix = $matrixJson | ConvertFrom-Json
        $allOutputPaths = ""

        foreach ($item in $parsedMatrix) {
            $instance = $item.instance
            $dbServer = $item.dbServerName
            $role = $item.role

            Write-Host "üîÅ Running action $($env:Action) for Instance: $instance, Role: $role, DB Server: $dbServer"

            $OutputFilePath = ""
            if ($env:Action -in @("DeployReport", "Script")) {
                $OutputFolder = Join-Path $env:ArtifactDownloadPath "deployreports"
                $OutputFileName = "$($env:DatabaseName).$($env:ReleaseNumber).$role.$($env:FileName)"
                $OutputFilePath = Join-Path $OutputFolder $OutputFileName

                $outputFileNameOnly = Split-Path $OutputFilePath -Leaf
                $outputDirectoryOnly = Split-Path $OutputFilePath -Parent

                $sanitizedTargetServer = $env:targetServer.TrimEnd('.')
                $outputFileNameOnlyWithDB = $outputFileNameOnly.Replace('[DatabaseName]', $env:DatabaseName).TrimStart('.')
                $OutputFilePath = Join-Path $outputDirectoryOnly "$sanitizedTargetServer.$outputFileNameOnlyWithDB"

                if (!(Test-Path (Split-Path $OutputFilePath))) {
                    New-Item -ItemType Directory -Path (Split-Path $OutputFilePath) -Force
                }
                $allOutputPaths += "$OutputFilePath,"
            }

            & $env:scriptPath `
              -Action "$env:Action" `
              -DacpacPath "$env:DacpacPath" `
              -OutputPath "$OutputFilePath" `
              -ServerInstance "$dbServer" `
              -DatabaseName "$env:DatabaseName" `
              -UserName "$env:UserName" `
              -Password $env:retrievedPassword `
              -SqlPackagePath "$env:SqlPackagePath" `
              -PublishProfilePath "$env:PublishProfileFilePath" `
              -UseMultiSubnetFailover "$env:UseMultiSubnetFailover" `
              -SQLPackageDeployProperties "$DeployProps" `
              -SQLCmdVariables "$CMDVars" `
              -SQLPackageParameters "$Params"
        }

        if ($env:Action -in @("DeployReport", "Script")) {
            $allOutputPaths = $allOutputPaths.TrimEnd(',')
            "OutPutPath=$allOutputPaths" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        }
