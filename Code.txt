# od-gha-files/sqlpackage-runner-fixed.ps1

param (
    [string]$Action,
    [string]$DacpacPath,
    [string]$PublishProfilePath = "",
    [string]$ServerInstance,
    [string]$DatabaseName,
    [string]$UserName,
    [string]$Password,
    [string]$SqlPackagePath,
    [string]$OutputPath = "",
    [string]$UseMultiSubnetFailover,
    [string]$SQLPackageDeployProperties,
    [string]$SQLCmdVariables = "",
    [string]$SQLPackageParameters = ""
)

$ErrorActionPreference = "Stop"

Write-Host "Script started. Action: $Action"

# --- Helper Functions ---

function Format-SqlCmdVariables {
    param ([AllowNull()][Parameter(Mandatory=$true)][hashtable]$SqlCmdVariables)
    $result = @()
    if ($SqlCmdVariables -ne $null) {
        foreach ($variable in $SqlCmdVariables.GetEnumerator()) {
            $result += "/v:$($variable.Name)=$($variable.Value)"
        }
    }
    return $result
}

function Format-SqlPackageParameters {
    param ([AllowNull()][Parameter(Mandatory=$true)][hashtable]$Parameters)
    $result = @()
    if ($Parameters -ne $null) {
        foreach ($variable in $Parameters.GetEnumerator()) {
            $result += "/p:$($variable.Name)=$($variable.Value)"
        }
    }
    return $result
}

# --- Validate sqlpackage.exe Path ---

if (-not (Test-Path $SqlPackagePath)) {
    throw "sqlpackage.exe not found at: $SqlPackagePath"
}

# --- Ensure Output folder exists ---

if ($OutputPath -ne "") {
    $folder = Split-Path -Path $OutputPath -Parent
    if (-not (Test-Path $folder)) {
        Write-Host "Creating output directory: $folder"
        New-Item -Path $folder -ItemType Directory -Force | Out-Null
    }
}

# --- Build Connection String ---

$ConnectionString = "Server=$ServerInstance;Database=$DatabaseName;User=$UserName;Password=$Password;Encrypt=True;TrustServerCertificate=True;"
if ($UseMultiSubnetFailover) {
    $ConnectionString += "multisubnetfailover=true;"
}

# --- Parse Inputs ---

$null = $sqlCmdVariableCollection = @{}
$null = $sqlPackageParameterCollection = @{}
$null = $sqlPackagePropertyCollection = @{}
$rawSqlPackageDeployProperty = ""

# SQLCmdVariables
if (![string]::IsNullOrWhiteSpace($SQLCmdVariables)) {
    try {
        $sqlCmdVariableCollection = ConvertFrom-Json $SQLCmdVariables
    } catch {
        Write-Warning "Failed to parse SqlCmdVariables. Skipping."
    }
} else {
    Write-Host "SqlCmdVariables is empty."
}

# SQLPackageParameters
if (![string]::IsNullOrWhiteSpace($SQLPackageParameters)) {
    try {
        $sqlPackageParameterCollection = ConvertFrom-Json $SQLPackageParameters
    } catch {
        Write-Warning "Failed to parse SQLPackageParameters. Skipping."
    }
} else {
    Write-Host "SqlPackageParameters is empty."
}

# SQLPackageDeployProperties
if (![string]::IsNullOrWhiteSpace($SQLPackageDeployProperties)) {
    try {
        $sqlPackagePropertyCollection = ConvertFrom-Json $SQLPackageDeployProperties
    } catch {
        Write-Warning "Failed to parse SQLPackageDeployProperties. Falling back to raw string."
        $rawSqlPackageDeployProperty = $SQLPackageDeployProperties
    }
} else {
    Write-Host "SQLPackageDeployProperties is empty."
}

# --- Build sqlpackage.exe Parameters ---

$params = @()

switch ($Action.ToLower()) {
    "extract" {
        if (-not $OutputPath) { throw "OutputPath is required for Extract" }
        $params += "/Action:Extract", "/TargetFile:$OutputPath", "/SourceConnectionString:$ConnectionString"
    }
    "deployreport" {
        if (-not $OutputPath -or -not $DacpacPath) { throw "OutputPath and DacpacPath required for DeployReport" }
        $params += "/Action:DeployReport", "/SourceFile:$DacpacPath", "/TargetConnectionString:$ConnectionString", "/OutputPath:$OutputPath"
        if ($PublishProfilePath) { $params += "/Profile:$PublishProfilePath" }
    }
    "script" {
        if (-not $OutputPath -or -not $DacpacPath) { throw "OutputPath and DacpacPath required for Script" }
        $params += "/Action:Script", "/SourceFile:$DacpacPath", "/TargetConnectionString:$ConnectionString", "/OutputPath:$OutputPath"
        if ($PublishProfilePath) { $params += "/Profile:$PublishProfilePath" }
    }
    "publish" {
        if (-not $DacpacPath) { throw "DacpacPath required for Publish" }
        $params += "/Action:Publish", "/SourceFile:$DacpacPath", "/TargetConnectionString:$ConnectionString"
        if ($PublishProfilePath) { $params += "/Profile:$PublishProfilePath" }
    }
    default {
        throw "Unsupported Action: $Action"
    }
}

# Add Variables, Parameters, Properties
$params += Format-SqlCmdVariables -SqlCmdVariables $sqlCmdVariableCollection
$params += Format-SqlPackageParameters -Parameters $sqlPackageParameterCollection

foreach ($property in $sqlPackagePropertyCollection.GetEnumerator()) {
    $params += "/p:$($property.Name)=$($property.Value)"
}

if ($rawSqlPackageDeployProperty -ne "") {
    $params += "/p:$rawSqlPackageDeployProperty"
}

# --- Debugging ---

$fullCmd = "& `"$SqlPackagePath`" " + ($params -join " ")
Write-Host "Executing full sqlpackage.exe command: $fullCmd"

# --- Execute with Retry ---

$maxRetries = 3
$retryDelaySeconds = 5
$attempt = 1
$success = $false

while ($attempt -le $maxRetries -and -not $success) {
    Write-Host "Attempt ${attempt} of ${maxRetries}: Running sqlpackage.exe..."
    try {
        & $SqlPackagePath @params
        if ($LASTEXITCODE -eq 0) {
            $success = $true
            Write-Host "sqlpackage executed successfully on attempt $attempt"
        } else {
            throw "sqlpackage failed with exit code $LASTEXITCODE"
        }
    } catch {
        Write-Warning "sqlpackage failed on attempt ${attempt}: $_"
        if ($attempt -lt $maxRetries) {
            Write-Host "Retrying in $retryDelaySeconds seconds..."
            Start-Sleep -Seconds $retryDelaySeconds
        } else {
            throw "sqlpackage failed after $maxRetries attempts."
        }
    }
    $attempt++
}

Write-Host "Script completed successfully"


==============

name: 'Build Output path and Run the DACPAC Deployment script'
description: 'Using sqlpackage.exe to run DACPAC operations - DeployReport, Script, Extract, Publish'

inputs:
  ArtifactDownloadPath:
    description: 'Path where the Artifacts will be stored'
    required: true
  DatabaseName:
    description: 'The database name the DACPAC is being applied against'
    required: true
  ReleaseNumber:
    description: 'Release Number of the build'
    required: true
  FileName:
    description: 'The name of Output File'
    required: true
  targetServer:
    description: 'The host to deploy the DACPAC to'
    required: true
  Action:
    description: 'The action to have sqlpackage.exe execute. One of: Extract, DeployReport, Script, Publish'
    required: true
  PublishProfileFilePath:
    description: 'The fully qualified path and file name of the Publish Profile to be applied against the supplied DACPAC'
    required: true
  GithubActor:
    description: 'Returns the username of the person or app that triggered the workflow run.'
    required: true
  SQLPackageDeployProperties:
    description: 'SQLPackage.exe Properties in JSON format'
    required: true
  SQLCMDVariables:
    description: 'SQLCMD Variables in JSON format'
    required: true
  SQLPackageParameters:
    description: 'SQLPackage.exe Parameters in JSON format'
    required: true
  SqlPackagePath:
    description: 'Path to sqlpackage.exe'
    required: true
  DacpacPath:
    description: '[Optional] The fully qualified path and file name of the DACPAC to publish.'
    required: false
  UserName:
    description: 'SQL username for authentication'
    required: true

runs:
  using: composite
  steps:
    - name: Build Output path and Run the DACPAC Deployment script
      shell: powershell
      env:
        ArtifactDownloadPath: ${{ inputs.ArtifactDownloadPath }}
        DatabaseName: ${{ inputs.DatabaseName }}
        ReleaseNumber: ${{ inputs.ReleaseNumber }}
        FileName: ${{ inputs.FileName }}
        targetServer: ${{ inputs.targetServer }}
        Action: ${{ inputs.Action }}
        PublishProfileFilePath: ${{ inputs.PublishProfileFilePath }}
        GithubActor: ${{ inputs.GithubActor }}
        SQLPackageDeployProperties: ${{ inputs.SQLPackageDeployProperties }}
        SQLCMDVariables: ${{ inputs.SQLCMDVariables }}
        SQLPackageParameters: ${{ inputs.SQLPackageParameters }}
      run: |
        $ErrorActionPreference = "Stop"

        # Replace Release Number token
        $SQLCMDVariablesUpdated = $env:SQLCMDVariables -replace '#{Octopus.Release.Number}', $env:ReleaseNumber

        $matrixJson = "$env:MATRIX_INSTANCE_LIST"
        if (-not ($matrixJson.Trim().StartsWith('['))) {
            Write-Host "Wrapping single JSON object in an array..."
            $matrixJson = @($matrixJson | ConvertFrom-Json) | ConvertTo-Json -Compress
        }

        Write-Host "Raw MATRIX_INSTANCE_LIST: $matrixJson"
        $parsedMatrix = $matrixJson | ConvertFrom-Json
        $allOutputPaths = ""

        foreach ($item in $parsedMatrix) {
            $instance = $item.instance
            $dbServer = $item.dbServerName
            $role = $item.role
            Write-Host ("Running action $($env:Action) for Instance: {0}, Role: {1}, DB Server: {2}" -f $instance, $role, $dbServer)

            $OutputFilePath = ""
            if ($env:Action -in @("DeployReport", "Script")) {
                $OutputFolder = Join-Path $env:ArtifactDownloadPath "deployreports"
                $OutputFileName = "$($env:DatabaseName).$($env:ReleaseNumber).$role.$($env:FileName)"
                $OutputFilePath = Join-Path $OutputFolder $OutputFileName

                $outputFileNameOnly = Split-Path $OutputFilePath -Leaf
                $outputDirectoryOnly = Split-Path $OutputFilePath -Parent

                $sanitizedTargetServer = $env:targetServer.TrimEnd('.')
                $outputFileNameOnlyWithDB = $outputFileNameOnly.Replace('[DatabaseName]', $env:DatabaseName).TrimStart('.')
                $OutputFilePath = Join-Path $outputDirectoryOnly "$sanitizedTargetServer.$outputFileNameOnlyWithDB"

                if (!(Test-Path (Split-Path $OutputFilePath))) {
                    New-Item -ItemType Directory -Path (Split-Path $OutputFilePath) -Force
                }

                $allOutputPaths += "$OutputFilePath,"
            }

            # Update DBVersion in Publish Profile safely
            try {
              $xml = [xml](Get-Content $env:PublishProfileFilePath)
              $dbVersionNode = $xml.Project.ItemGroup.SqlCmdVariable | Where-Object { $_.Include -eq 'DBVersion' }
              if ($null -ne $dbVersionNode) {
                $dbVersionNode.Value = "$env:RELEASE_NUMBER - GitHub Actions by $env:GITHUB_ACTOR ($env:GITHUB_ACTOR)"
                $xml.Save($env:PublishProfileFilePath)
              } else {
                Write-Host "DBVersion node not found in PublishProfile. Skipping DBVersion update."
              }
            } catch {
              Write-Warning "Failed to update PublishProfile DBVersion: $_"
            }

            # Call PS1 Script
            & $env:scriptPath `
              -Action $env:Action `
              -DacpacPath "${{ inputs.DacpacPath }}" `
              -OutputPath "$OutputFilePath" `
              -ServerInstance "$dbServer" `
              -DatabaseName "${{ inputs.DatabaseName }}" `
              -UserName "${{ inputs.UserName }}" `
              -Password $env:retrievedPassword `
              -SqlPackagePath "${{ inputs.SqlPackagePath }}" `
              -PublishProfilePath "${{ inputs.PublishProfileFilePath }}" `
              -UseMultiSubnetFailover "${{ inputs.UseMultiSubnetFailover }}" `
              -SQLPackageDeployProperties "$env:SQLPackageDeployProperties" `
              -SQLCmdVariables "$SQLCMDVariablesUpdated" `
              -SQLPackageParameters "$env:SQLPackageParameters"
        }

        if ($env:Action -in @("DeployReport", "Script")) {
            $allOutputPaths = $allOutputPaths.TrimEnd(',')
            "OutPutPath=$allOutputPaths" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        }
