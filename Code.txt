param (
    [string]$Action,
    [string]$DacpacPath,
    [string]$PublishProfilePath = "",
    [string]$ServerInstance,
    [string]$DatabaseName,
    [string]$UserName,
    [string]$Password,
    [string]$SqlPackagePath,
    [string]$OutputPath = "",
    [string]$UseMultiSubnetFailover,
    [string]$SQLPackageDeployProperties = "",
    [string]$SQLCmdVariables = "",
    [string]$SQLPackageParameters = ""
)

$ErrorActionPreference = "Stop"
Write-Host "Script started. Action: $Action"

# Helper: Create folder if needed
function Ensure-DirectoryExists($path) {
    $folder = Split-Path -Path $path -Parent
    if (-not (Test-Path $folder)) {
        Write-Host "Creating output directory: $folder"
        New-Item -Path $folder -ItemType Directory -Force | Out-Null
    }
}

# Helper: Parse Key=Value pairs
function Parse-KeyValuePairs($inputString, $prefix) {
    $result = @()
    if (![string]::IsNullOrWhiteSpace($inputString)) {
        foreach ($pair in $inputString -split ',') {
            $kv = $pair -split '='
            if ($kv.Count -eq 2) {
                $key = $kv[0].Trim()
                $value = $kv[1].Trim()
                $result += "$prefix$key=$value"
            }
        }
    }
    return $result
}

# Validate sqlpackage
if (-not (Test-Path $SqlPackagePath)) {
    throw "sqlpackage.exe not found at: $SqlPackagePath"
}

# Ensure output folder exists if needed
if ($OutputPath) {
    Ensure-DirectoryExists $OutputPath
}

# Build connection string
$ConnectionString = "Server=$ServerInstance;Database=$DatabaseName;User=$UserName;Password=$Password;Encrypt=True;TrustServerCertificate=True;"
if ($UseMultiSubnetFailover) { $ConnectionString += "multisubnetfailover=true;" }

# Build base params
$params = @()

switch ($Action.ToLower()) {
    "extract" {
        if (-not $OutputPath) { throw "OutputPath is required for Extract" }
        $params += "/Action:Extract", "/TargetFile:$OutputPath", "/SourceConnectionString:$ConnectionString"
    }
    "deployreport" {
        if (-not $OutputPath -or -not $DacpacPath) { throw "OutputPath and DacpacPath are required for DeployReport" }
        $params += "/Action:DeployReport", "/SourceFile:$DacpacPath", "/TargetConnectionString:$ConnectionString", "/OutputPath:$OutputPath"
        if ($PublishProfilePath) { $params += "/Profile:$PublishProfilePath" }
    }
    "script" {
        if (-not $OutputPath -or -not $DacpacPath) { throw "OutputPath and DacpacPath are required for Script" }
        $params += "/Action:Script", "/SourceFile:$DacpacPath", "/TargetConnectionString:$ConnectionString", "/OutputPath:$OutputPath"
        if ($PublishProfilePath) { $params += "/Profile:$PublishProfilePath" }
    }
    "publish" {
        if (-not $DacpacPath) { throw "DacpacPath is required for Publish" }
        $params += "/Action:Publish", "/SourceFile:$DacpacPath", "/TargetConnectionString:$ConnectionString"
        if ($PublishProfilePath) { $params += "/Profile:$PublishProfilePath" }
    }
    default {
        throw "Unsupported Action: $Action"
    }
}

# Add Key-Value Parameters
$params += Parse-KeyValuePairs $SQLCmdVariables "/v:"
$params += Parse-KeyValuePairs $SQLPackageParameters "/v:"
if (![string]::IsNullOrWhiteSpace($SQLPackageDeployProperties)) {
    $params += "/p:$SQLPackageDeployProperties"
}

# Run sqlpackage with retry
Write-Host "Running sqlpackage with parameters: $params"

$maxRetries = 3
$retryDelaySeconds = 5
$success = $false
$attempt = 1

while ($attempt -le $maxRetries -and -not $success) {
    Write-Host "Attempt $attempt of $maxRetries..."

    try {
        & $SqlPackagePath @params
        if ($LASTEXITCODE -eq 0) {
            $success = $true
            Write-Host "sqlpackage executed successfully on attempt $attempt"
        } else {
            throw "sqlpackage failed with exit code $LASTEXITCODE"
        }
    } catch {
        Write-Warning "Attempt $attempt failed: $_"
        if ($attempt -lt $maxRetries) {
            Start-Sleep -Seconds $retryDelaySeconds
        } else {
            throw "sqlpackage failed after $maxRetries attempts."
        }
    }

    $attempt++
}

Write-Host "Completed successfully."
