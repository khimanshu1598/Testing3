    run: |
      # Validate required inputs
      $requiredInputs = @(
        @{Name='Action'; Value=$env:Action; ValidValues=@('extract','deployreport','script','publish')},
        @{Name='DatabaseName'; Value=$env:DatabaseName},
        @{Name='UserName'; Value=$env:UserName},
        @{Name='SqlPackagePath'; Value=$env:SqlPackagePath},
        @{Name='sql-password-parameter-store'; Value=$env:sql-password-parameter-store},
        @{Name='ArtifactDownloadPath'; Value=$env:ArtifactDownloadPath},
        @{Name='ReleaseNumber'; Value=$env:ReleaseNumber},
        @{Name='FileName'; Value=$env:FileName},
        @{Name='TargetServer'; Value=$env:TargetServer},
        @{Name='PublishProfileFilePath'; Value=$env:PublishProfileFilePath},
        @{Name='UseMultiSubnetFailover'; Value=$env:UseMultiSubnetFailover; ValidValues=@('true','false')},
        @{Name='SQLPackageDeployProperties'; Value=$env:SQLPackageDeployProperties},
        @{Name='SQLCMDVariables'; Value=$env:SQLCMDVariables},
        @{Name='SQLPackageParameters'; Value=$env:SQLPackageParameters}
      )

      foreach ($input in $requiredInputs) {
        if ([string]::IsNullOrWhiteSpace($input.Value)) {
          Write-Host "::error::$($input.Name) is required"
          exit 1
        }

        if ($input.ValidValues -and $input.ValidValues -notcontains $input.Value) {
          Write-Host "::error::$($input.Name) must be one of: $($input.ValidValues -join ', ')"
          exit 1
        }
      }

      # Validate JSON inputs
      $jsonInputs = @(
        @{ Name = 'SQLPackageDeployProperties'; Value = $env:SQLPackageDeployProperties },
        @{ Name = 'SQLCMDVariables'; Value = $env:SQLCMDVariables },
        @{ Name = 'SQLPackageParameters'; Value = $env:SQLPackageParameters }
      )

      foreach ($input in $jsonInputs) {
        try {
          $null = $input.Value | ConvertFrom-Json -ErrorAction Stop
        } catch {
          Write-Host "::error::Invalid JSON format in $($input.Name)"
          exit 1
        }
      }

      # Action-specific validation
      if ($env:Action -eq 'publish' -and [string]::IsNullOrWhiteSpace($env:DacpacPath)) {
        Write-Host "::error::DacpacPath is required for publish action"
        exit 1
      }

      # Validate sqlpackage.exe path
      if (-not (Test-Path $env:SqlPackagePath)) {
        Write-Host "::error::sqlpackage.exe not found at specified path: $($env:SqlPackagePath)"
        exit 1
      }
