# SQL Deploy Report Check Action

Compares deploy report XML files against baseline versions to determine if manual approval is required for database changes.

## Inputs

| Name | Description | Required | Validation |
|------|-------------|----------|------------|
| `deploy-report-file-path` | Path(s) to deploy report XML file(s) | Yes | Comma-separated paths to valid XML files |

## Outputs

| Name | Description |
|------|-------------|
| `approval-required` | Boolean indicating whether approval is needed (`true`/`false`) |

## Behavior

1. Validates input file paths exist
2. Compares each XML file against its baseline version
3. Sets `APPROVAL_REQUIRED` environment variable
4. Outputs `approval-required` boolean value

## Example Usage

```yaml
- uses: paassql-pipelines/sql-deploy-report-check@v1
  id: report-check
  with:
    deploy-report-file-path: 'reports/deploy-report.xml,reports/another-report.xml'
  
- name: Check Approval Status
  run: |
    if [ "${{ steps.report-check.outputs.approval-required }}" == "true" ]; then
      echo "Approval required for deployment"
    fi
```

## Supported Runners

- **Windows**: Native PowerShell support
- **Linux/macOS**: Requires PowerShell Core

## Error Handling

Fails if:
- No deploy report path provided
- Specified XML files not found
- XML files are malformed
- Baseline comparison fails

############################

runs:
  using: "composite"
  steps:
    - name: Validate inputs
      id: input-validation
      shell: powershell
      run: |
        # Validate required input
        if ([string]::IsNullOrWhiteSpace("${{ inputs.deploy-report-file-path }}")) {
          Write-Host "::error::deploy-report-file-path is required"
          exit 1
        }

        # Split and validate each path
        $paths = "${{ inputs.deploy-report-file-path }}" -split ',' | ForEach-Object { $_.Trim() }
        $missingFiles = @()

        foreach ($path in $paths) {
          if (-not (Test-Path $path)) {
            $missingFiles += $path
          }
          elseif (-not (Test-Path "$path.baseline")) {
            Write-Host "::warning::Baseline file not found for $path"
          }
        }

        if ($missingFiles.Count -gt 0) {
          Write-Host "::error::Missing deploy report file(s): $($missingFiles -join ', ')"
          exit 1
        }

        # Validate XML structure of files
        $invalidXmlFiles = @()
        foreach ($path in $paths) {
          try {
            [xml](Get-Content $path) | Out-Null
          } catch {
            $invalidXmlFiles += $path
          }
        }

        if ($invalidXmlFiles.Count -gt 0) {
          Write-Host "::error::Invalid XML format in file(s): $($invalidXmlFiles -join ', ')"
          exit 1
        }
