# SQL User Management Action

Validates, deletes (if exists), and creates a new SQL user with permissions on target servers via AWS SSM.

## Inputs

| Name | Description | Required | Default | Validation |
|------|-------------|----------|---------|------------|
| `destination-path` | Remote path for script execution | Yes | - | Valid Windows path |
| `aws-region` | AWS region of target instances | Yes | - | Valid AWS region |
| `sql-password-parameter-store` | SSM parameter store path for SQL password | Yes | - | Valid parameter path |
| `db-name` | Target database name | Yes | - | Non-empty string |
| `sql-user-name` | SQL username to manage | Yes | - | Valid SQL identifier |
| `username` | Domain user (domain\user format) | Yes | - | Valid domain format |
| `needs-windows-authentication` | Authentication method | Yes | `true` | `true`/`false` |

## Prerequisites

1. **AWS Permissions**:
   - `ssm:SendCommand`
   - `ssm:GetParameter`
   - `ec2:DescribeInstances`
2. **Target EC2**:
   - SSM Agent installed
   - PowerShell available
   - Network access to SQL Server
3. **Environment Variable**:
   - `MATRIX_INSTANCE_LIST` from previous step

## Example Usage

```yaml
- uses: paassql-pipelines/validate-create-sql-user@v1
  with:
    destination-path: 'C:\sql-scripts'
    aws-region: 'us-east-1'
    sql-password-parameter-store: '/prod/db/password'
    db-name: 'customer_data'
    sql-user-name: 'app_user'
    username: 'DOMAIN\svc_github'
    needs-windows-authentication: true
  env:
    MATRIX_INSTANCE_LIST: ${{ steps.previous-step.outputs.MATRIX_INSTANCE_LIST }}
```

## Workflow Steps

1. Transfers PowerShell scripts to target server
2. Validates and deletes existing SQL user (if found)
3. Creates new SQL user with permissions

## Supported Runners

- **Windows**: Native PowerShell support
- **Linux/macOS**: Requires PowerShell Core

## Error Handling

Fails if:
- Required inputs are missing
- SSM parameter not found
- SQL connection fails
- User validation fails
- Permission issues occur


####################################

runs:
  using: composite
  steps:
    - name: Validate inputs
      shell: pwsh
      run: |
        # Required field validation
        $requiredInputs = @(
          @{Name='destination-path'; Value="${{ inputs.destination-path }}"},
          @{Name='aws-region'; Value="${{ inputs.aws-region }}"},
          @{Name='sql-password-parameter-store'; Value="${{ inputs.sql-password-parameter-store }}"},
          @{Name='db-name'; Value="${{ inputs.db-name }}"},
          @{Name='sql-user-name'; Value="${{ inputs.sql-user-name }}"},
          @{Name='username'; Value="${{ inputs.username }}"}
        )

        foreach ($input in $requiredInputs) {
          if ([string]::IsNullOrWhiteSpace($input.Value)) {
            Write-Host "::error::$($input.Name) is required"
            exit 1
          }
        }

        # Validate boolean input
        if ("${{ inputs.needs-windows-authentication }}" -notmatch '^(true|false)$') {
          Write-Host "::error::needs-windows-authentication must be 'true' or 'false'"
          exit 1
        }

        # Validate domain\username format when Windows Auth is enabled
        if ("${{ inputs.needs-windows-authentication }}" -eq 'true' -and "${{ inputs.username }}" -notmatch '^[^\\]+\\[^\\]+$') {
          Write-Host "::error::username must be in domain\user format when using Windows Authentication"
          exit 1
        }

        # Validate SQL username format
        if ("${{ inputs.sql-user-name }}" -match '[\[\]\s,;]') {
          Write-Host "::error::sql-user-name contains invalid characters"
          exit 1
        }

        # Validate MATRIX_INSTANCE_LIST exists
        if (-not $env:MATRIX_INSTANCE_LIST) {
          Write-Host "::error::MATRIX_INSTANCE_LIST environment variable is required"
          exit 1
        }
