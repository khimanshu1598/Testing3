param (
    [string]$Action,
    [string]$DacpacPath,
    [string]$PublishProfilePath = "",
    [string]$ServerInstance,
    [string]$DatabaseName,
    [string]$UserName,
    [string]$Password,
    [string]$SqlPackagePath,
    [string]$OutputPath = "",
    [string]$UseMultiSubnetFailover,
    [string]$SQLPackageDeployProperties,
    [string]$SQLCmdVariables = "",
    [string]$SQLPackageParameters = ""
)

$ErrorActionPreference = "Stop"
Write-Host "Script started. Action: $Action"

# --- Helper Functions ---

function Format-SqlCmdVariables {
    [CmdletBinding()]
    param (
        [AllowNull()][Parameter(Mandatory=$true)][hashtable]$SqlCmdVariables
    )
    trap { throw $_ }

    $result = @()
    if ($SqlCmdVariables -ne $null) {
        foreach ($variable in $SqlCmdVariables.GetEnumerator()) {
            $result += "/v:$($variable.Name)=$($variable.Value)"
        }
    }
    return $result
}

function Format-SqlPackageParameters {
    [CmdletBinding()]
    param (
        [AllowNull()][Parameter(Mandatory=$true)][hashtable]$Parameters
    )
    trap { throw $_ }

    $result = @()
    if ($Parameters -ne $null) {
        foreach ($variable in $Parameters.GetEnumerator()) {
            if (($variable.Value -is [int]) -or ($variable.Value -is [bool])) {
                $result += "/$($variable.Name):$($variable.Value)"
            } else {
                $result += "/$($variable.Name):'$($variable.Value)'"
            }
        }
    }
    return $result
}

function Format-SqlPackageProperties {
    [CmdletBinding()]
    param (
        [AllowNull()][Parameter(Mandatory=$true)][hashtable]$Properties
    )
    trap { throw $_ }

    $result = @()
    if ($Properties -ne $null) {
        foreach ($variable in $Properties.GetEnumerator()) {
            if (($variable.Value -is [int]) -or ($variable.Value -is [bool])) {
                $result += "/p:$($variable.Name)=$($variable.Value)"
            } else {
                $result += "/p:$($variable.Name)='$($variable.Value)'"
            }
        }
    }
    return $result
}

# --- Main Script Logic ---

# Validate sqlpackage.exe path
if (-not (Test-Path $SqlPackagePath)) {
    throw "sqlpackage.exe not found at: $SqlPackagePath"
}

# Ensure Output folder exists
if ($OutputPath -ne "") {
    $folder = Split-Path -Path $OutputPath -Parent
    if (-not (Test-Path $folder)) {
        Write-Host "Creating output directory: $folder"
        New-Item -Path $folder -ItemType Directory -Force | Out-Null
    }
}

# Build Connection String
$ConnectionString = "Server=$ServerInstance;Database=$DatabaseName;User=$UserName;Password=$Password;Encrypt=True;TrustServerCertificate=True;"
if ($UseMultiSubnetFailover) {
    $ConnectionString += "multisubnetfailover=true;"
}

# --- Parse Inputs to Hashtables ---

$null = $sqlCmdVariableCollection = @{}
$null = $sqlPackageParameterCollection = @{}
$null = $sqlPackagePropertyCollection = @{}

# SQLCmdVariables
if (![string]::IsNullOrWhiteSpace($SQLCmdVariables)) {
    try {
        (ConvertFrom-Json $SQLCmdVariables).psobject.properties | ForEach-Object {
            $sqlCmdVariableCollection[$_.Name] = $_.Value
        }
        Write-Host "Parsed SqlCmdVariables successfully."
    } catch {
        Write-Warning "Failed to parse SqlCmdVariables. Input was not valid JSON. Value: $SQLCmdVariables"
    }
} else {
    Write-Host "SqlCmdVariables is empty."
}

# SQLPackageParameters
if (![string]::IsNullOrWhiteSpace($SQLPackageParameters)) {
    try {
        (ConvertFrom-Json $SQLPackageParameters).psobject.properties | ForEach-Object {
            $sqlPackageParameterCollection[$_.Name] = $_.Value
        }
        Write-Host "Parsed SqlPackageParameters successfully."
    } catch {
        Write-Warning "Failed to parse SqlPackageParameters. Input was not valid JSON. Value: $SQLPackageParameters"
    }
} else {
    Write-Host "SqlPackageParameters is empty."
}

# SQLPackageDeployProperties
if (![string]::IsNullOrWhiteSpace($SQLPackageDeployProperties)) {
    try {
        (ConvertFrom-Json $SQLPackageDeployProperties).psobject.properties | ForEach-Object {
            $sqlPackagePropertyCollection[$_.Name] = $_.Value
        }
        Write-Host "Parsed SQLPackageDeployProperties successfully."
    } catch {
        Write-Warning "Failed to parse SQLPackageDeployProperties. Input was not valid JSON. Value: $SQLPackageDeployProperties"
    }
} else {
    Write-Host "SQLPackageDeployProperties is empty."
}

# --- Build final sqlpackage.exe Parameter Array ---

$params = @()

# Action
$params += "/Action:$Action"

# Profile
if (![string]::IsNullOrWhiteSpace($PublishProfilePath)) {
    $params += "/Profile:$PublishProfilePath"
}

# SourceFile / TargetFile
if ($Action -eq 'Extract') {
    $params += "/TargetFile:$DacpacPath"
} else {
    $params += "/SourceFile:$DacpacPath"
}

# Connection String
if (![string]::IsNullOrWhiteSpace($ConnectionString)) {
    if ($Action -eq 'Extract') {
        $params += "/SourceConnectionString:$ConnectionString"
    } else {
        $params += "/TargetConnectionString:$ConnectionString"
    }
}

# OutputPath
if (($Action -eq 'Script' -or $Action -eq 'DeployReport') -and (![string]::IsNullOrWhiteSpace($OutputPath))) {
    $params += "/OutputPath:$OutputPath"
}

# Add formatted /v: (variables)
$params += Format-SqlCmdVariables -SqlCmdVariables $sqlCmdVariableCollection

# Add formatted /p: (properties)
$params += Format-SqlPackageProperties -Properties $sqlPackagePropertyCollection

# Add formatted / (parameters)
$params += Format-SqlPackageParameters -Parameters $sqlPackageParameterCollection

# --- Log the final built params ---
Write-Host "Final sqlpackage parameters:"
foreach ($paramItem in $params) {
    Write-Host "  $paramItem"
}

# --- Execute with Retry ---

$maxRetries = 3
$retryDelaySeconds = 5
$attempt = 1
$success = $false

while ($attempt -le $maxRetries -and -not $success) {
    Write-Host "Attempt ${attempt} of ${maxRetries}: Running sqlpackage.exe..."
    try {
        & $SqlPackagePath @params
        if ($LASTEXITCODE -eq 0) {
            $success = $true
            Write-Host "sqlpackage executed successfully on attempt $attempt"
        } else {
            throw "sqlpackage failed with exit code $LASTEXITCODE"
        }
    } catch {
        Write-Warning "sqlpackage failed on attempt ${attempt}: $_"
        if ($attempt -lt $maxRetries) {
            Write-Host "Retrying in $retryDelaySeconds seconds..."
            Start-Sleep -Seconds $retryDelaySeconds
        } else {
            throw "sqlpackage failed after $maxRetries attempts."
        }
    }
    $attempt++
}

Write-Host "Script completed successfully"

##########################################

Script started. Action: DeployReport
SqlCmdVariables is empty.
SqlPackageParameters is empty.
WARNING: Failed to parse SQLPackageDeployProperties. Input was not valid JSON. Value: 
AdditionalDeploymentContributorArguments='CreateIndexOperationalPropsModifier.Online=ON;CreateIndexOperationalPropsModi
fier.MAXDOP=2'
Final sqlpackage parameters:
  /Action:DeployReport
  /Profile:C:\actions-runner\_work\expenses-employee-invitation-api\expenses-employee-invitation-api\packages\abc-uat.publish.xml
  /SourceFile:C:\actions-runner\_work\expenses-employee-invitation-api\expenses-employee-invitation-api\packages\Employee.Invitation.Database.Build.dacpac
  /TargetConnectionString:Server=GSQN-MB48C2.uat.aws.abc.com;Database=DBA;User=HimanshuSuccessUser;***;Encrypt=True;TrustServerCertificate=True;
  /OutputPath:C:\actions-runner\_work\expenses-employee-invitation-api\expenses-employee-invitation-api\dacpacs\deployreports\employeeinvitation.db.livestage6.test.abc.com.DBA.485.primary.deployreport.xml
Attempt 1 of 3: Running sqlpackage.exe...
Generating report for database 'DBA' on server 'GSQN-MB48C2.uat.aws.abc.com'.
*** The following SqlCmd variables are not defined in the target scripts: DBVersion RedeployJobs Environment.
*** The column DeployedBy on table [deployment].[Version] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
Successfully generated report to file C:\actions-runner\_work\expenses-employee-invitation-api\expenses-employee-invitation-api\dacpacs\deployreports\employeeinvitation.db.livestage6.test.abc.com.DBA.485.primary.deployreport.xml.
Time elapsed 0:00:08.64
sqlpackage executed successfully on attempt 1
Script completed successfully
