name: "Send PowerShell Script to EC2 via SSM"
description: "Uploads a single PowerShell script to a Windows EC2 instance via SSM and stores it under C:\\Temp\\EmployeeInvitation"
inputs:
  script_path:
    description: "Path to the PowerShell script"
    required: true
  instance_id:
    description: "Target EC2 instance ID"
    required: true
  region:
    description: "AWS region"
    required: true
runs:
  using: "composite"
  steps:
  - name: Encode PowerShell Script to Base64
    id: encode
    shell: powershell
    run: |
      $script = Get-Content "${{ inputs.script_path }}" -Raw
      $encoded = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($script))
      "scriptEncoded=$encoded" >> $env:GITHUB_OUTPUT

  - name: Transfer Script to EC2 and Save in C:\Temp\EmployeeInvitation
    shell: powershell
    run: |
      $encoded = "${{ steps.encode.outputs.scriptEncoded }}"

      $commands = @(
        "if (!(Test-Path 'C:\Temp\EmployeeInvitation')) { New-Item -ItemType Directory -Path 'C:\Temp\EmployeeInvitation' | Out-Null } else { Get-ChildItem -Path 'C:\Temp\EmployeeInvitation' -Recurse -Force | Remove-Item -Force -Recurse }",
        "`$decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('$encoded'))",
        "Set-Content -Path 'C:\Temp\EmployeeInvitation\sql-actions.ps1' -Value `$decoded -Force",
        "Write-Host 'sql-actions.ps1 transferred successfully'"
      )

      #FIXED: Use parentheses before -join
      $commandJson = ($commands | ForEach-Object { "`"`$_`"" }) -join ","

      $commandId = aws ssm send-command `
        --document-name "AWS-RunPowerShellScript" `
        --instance-ids "${{ inputs.instance_id }}" `
        --region "${{ inputs.region }}" `
        --parameters "commands=[$commandJson]" `
        --comment "Uploading sql-actions.ps1 to EC2" `
        --query "Command.CommandId" `
        --output text

      Write-Host "Command ID: $commandId"

      aws ssm wait command-executed `
        --region "${{ inputs.region }}" `
        --command-id $commandId `
        --instance-id "${{ inputs.instance_id }}"




Error parsing parameter '--parameters': Invalid JSON: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)
JSON received: {commands:[Get-ChildItem \u0027C:\\Temp\\EmployeeInvitation\u0027]}
Error: Process completed with exit code 1.





-----------------

jobs:
  deploy:
    runs-on: windows-latest
    steps:
      # Your existing steps...
      
      - name: Send sql-actions.ps1 to target server
        uses: ./.github/actions/send-file-via-ssm  # Assuming you save the action here
        with:
          file-path: './od-gha-files/sql-actions.ps1'
          instance-id: 'your-ec2-instance-id'
          destination-path: 'C:\Temp'
          
      - name: Verify file on target server
        shell: pwsh
        run: |
          $result = aws ssm send-command `
            --instance-ids "your-ec2-instance-id" `
            --document-name "AWS-RunPowerShellScript" `
            --parameters "commands=[Test-Path 'C:\Temp\sql-actions.ps1'; Get-Item 'C:\Temp\sql-actions.ps1' | Select-Object -Property FullName,Length,LastWriteTime]" `
            --output json
          
          $commandResult = $result | ConvertFrom-Json
          $commandId = $commandResult.Command.CommandId
          
          # Wait a few seconds for command to complete
          Start-Sleep -Seconds 5
          
          $output = aws ssm get-command-invocation `
            --command-id $commandId `
            --instance-id "your-ec2-instance-id" `
            --output json | ConvertFrom-Json
          
          Write-Host "File verification output:"
          Write-Host $output.StandardOutputContent
          
          if ($output.Status -ne 'Success') {
            throw "File verification failed"
          }

----------------

Error parsing parameter '--parameters': Invalid JSON: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)
JSON received: {commands:[Get-ChildItem -Path "C:\\Temp\\EmployeeInvitation" | Select-Object Name,Length,LastWriteTime | ConvertTo-Json -Compress]}
usage: aws [options] <command> <subcommand> [<subcommand> ...] [parameters]
To see help text, you can run:
  aws help
  aws <command> help
  aws <command> <subcommand> help
aws.exe: error: argument --command-id: expected one argument
Files in C:\Temp\EmployeeInvitation:
Error checking files:
