name: 'SSM File Transfer'
description: 'Securely transfer files to EC2 via AWS SSM with chunking support'
inputs:
  source-path:
    description: 'Local path to the file'
    required: true
  instance-id:
    description: 'Target EC2 instance ID'
    required: true
  destination-path:
    description: 'Destination path on target (include filename)'
    required: true
  chunk-size:
    description: 'Chunk size in bytes (default: 15000)'
    default: '15000'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: pwsh
      run: |
        if (-not (Test-Path "${{ inputs.source-path }}")) {
          throw "Source file not found at ${{ inputs.source-path }}"
        }
        if ([int]${{ inputs.chunk-size }} -gt 16000) {
          throw "Chunk size cannot exceed 16000 bytes (AWS SSM limit)"
        }

    - name: Prepare transfer
      id: setup
      shell: pwsh
      run: |
        $file = Get-Item "${{ inputs.source-path }}"
        $fileName = $file.Name
        $tempTarget = "$env:RUNNER_TEMP/ssm-transfer"
        
        New-Item -ItemType Directory -Path $tempTarget -Force | Out-Null
        $chunkCount = [math]::Ceiling($file.Length / ${{ inputs.chunk-size }})
        
        echo "::set-output name=file_name::$fileName"
        echo "::set-output name=chunk_count::$chunkCount"
        echo "::set-output name=file_size::$($file.Length)"

    - name: Create target directory
      shell: pwsh
      run: |
        $dir = Split-Path -Path "${{ inputs.destination-path }}" -Parent
        $command = @"
        if (-not (Test-Path '$dir')) { 
          New-Item -ItemType Directory -Path '$dir' -Force | Out-Null 
        }
        Remove-Item "${{ inputs.destination-path }}.tmp" -ErrorAction SilentlyContinue
        "@

        aws ssm send-command `
          --instance-ids "${{ inputs.instance-id }}" `
          --document-name "AWS-RunPowerShellScript" `
          --parameters "commands=['$($command -replace "'", "''")']" `
          --output text

    - name: Transfer chunks
      shell: pwsh
      run: |
        $reader = [System.IO.File]::OpenText("${{ inputs.source-path }}")
        $buffer = New-Object char[] ${{ inputs.chunk-size }}
        $chunkIndex = 0
        
        try {
          while (($bytesRead = $reader.Read($buffer, 0, $buffer.Length)) -gt 0) {
            $chunk = [string]::new($buffer, 0, $bytesRead)
            $chunkFile = "$env:RUNNER_TEMP/ssm-transfer/chunk_$chunkIndex.txt"
            Set-Content -Path $chunkFile -Value $chunk -Encoding UTF8 -NoNewline
            
            $command = @"
            Add-Content -Path "${{ inputs.destination-path }}.tmp" -Value @'
            $(Get-Content $chunkFile -Raw -Encoding UTF8)
            '@ -Encoding UTF8 -NoNewline
            "@

            aws ssm send-command `
              --instance-ids "${{ inputs.instance-id }}" `
              --document-name "AWS-RunPowerShellScript" `
              --parameters "commands=['$($command -replace "'", "''")']" `
              --output text
            
            $chunkIndex++
          }
        } finally {
          $reader.Close()
        }

    - name: Finalize transfer
      shell: pwsh
      run: |
        $verifyCommand = @"
        if (Test-Path "${{ inputs.destination-path }}.tmp") {
          Move-Item -Path "${{ inputs.destination-path }}.tmp" `
                    -Destination "${{ inputs.destination-path }}" -Force
          
          $actualSize = (Get-Item "${{ inputs.destination-path }}").Length
          if ($actualSize -ne ${{ steps.setup.outputs.file_size }}) {
            throw "Size mismatch! Expected ${{ steps.setup.outputs.file_size }} bytes, got $actualSize"
          }
          echo "Transfer validated ($actualSize bytes)"
        } else {
          throw "Temporary file not found!"
        }
        "@

        aws ssm send-command `
          --instance-ids "${{ inputs.instance-id }}" `
          --document-name "AWS-RunPowerShellScript" `
          --parameters "commands=['$($verifyCommand -replace "'", "''")']" `
          --output text


-----------------

jobs:
  deploy:
    runs-on: windows-latest
    steps:
      # Your existing steps...
      
      - name: Send sql-actions.ps1 to target server
        uses: ./.github/actions/send-file-via-ssm  # Assuming you save the action here
        with:
          file-path: './od-gha-files/sql-actions.ps1'
          instance-id: 'your-ec2-instance-id'
          destination-path: 'C:\Temp'
          
      - name: Verify file on target server
        shell: pwsh
        run: |
          $result = aws ssm send-command `
            --instance-ids "your-ec2-instance-id" `
            --document-name "AWS-RunPowerShellScript" `
            --parameters "commands=[Test-Path 'C:\Temp\sql-actions.ps1'; Get-Item 'C:\Temp\sql-actions.ps1' | Select-Object -Property FullName,Length,LastWriteTime]" `
            --output json
          
          $commandResult = $result | ConvertFrom-Json
          $commandId = $commandResult.Command.CommandId
          
          # Wait a few seconds for command to complete
          Start-Sleep -Seconds 5
          
          $output = aws ssm get-command-invocation `
            --command-id $commandId `
            --instance-id "your-ec2-instance-id" `
            --output json | ConvertFrom-Json
          
          Write-Host "File verification output:"
          Write-Host $output.StandardOutputContent
          
          if ($output.Status -ne 'Success') {
            throw "File verification failed"
          }

----------------

Refreshing environment variables from the registry for powershell.exe. Please wait...
Finished
Test-Path : Cannot bind argument to parameter 'Path' because it is an empty string.
At C:\actions-runner\_work\_temp\5e0145a8-790a-4941-b716-77aceaa72b23.ps1:2 char:21
+ if (-not (Test-Path "")) {
+                     ~~
    + CategoryInfo          : InvalidData: (:) [Test-Path], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : ParameterArgumentValidationErrorEmptyStringNotAllowed,Microsoft.PowerShell.Commands.Test 
   PathCommand
 
Error: Process completed with exit code 1.
