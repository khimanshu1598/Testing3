run-dacpac-deployment/action.yaml: -

name: 'Build Output path and Run the DACPAC Deployment script'
description: 'Using sqlpacakge.exe to run DACPAC operations - Deployreport, script, extract & publish'

inputs:
  ArtifactDownloadPath:
    description: 'Path where the Artifacts will be stored'
    required: true
  DatabaseName:
    description: 'The database name the DACPAC is being applied against'
    required: true
  ReleaseNumber:
    description: 'Release Number of the build'
    required: true
  FileName:
    description: 'The name of Output File'
    required: true
  targetServer:
    description: 'The host to deploy the DACPAC to'
    required: true
  Action:
    description: 'The action to have sqlpackage.exe execute. One of: extract, deployreport, script, publish'
    required: true
  PublishProfileFilePath:
    description: 'The fully qualified path and file name of the Publish Profile to be applied against the supplied DACPAC'
    required: true
  GithubActor:
    description: 'Returns the username of the person or app that triggered the workflow run.'
    required: true
  SQLPackageDeployProperties:
    description: 'Collection of SQLPackage.exe Properties in JSON format eg {"PropertyName":"PropertyValue","PropertyTwoName":"PropertyTwoValue"}'
    required: true
  SQLCMDVariables:
    description: 'Collection of SQLCMD Variables in JSON format eg {"VariableName":"VariableValue","VariableTwoName":"VariableTwoValue"}'
    required: true
  SQLPackageParameters:
    description: 'Collection of SQLPackage.exe Parameters in JSON format eg {"ParameterName":"ParameterValue","ParameterTwoName":"ParameterTwoValue"}'
    required: true
  SqlPackagePath:
    description: 'Path to sqlpackage.exe'
    required: true
  DacpacPath:
    description: '[Optional] The fully qualified path and file name of the DACPAC to publish.'
    required: false
  UserName:
    description: 'SQL username to be used for performing actions'
    required: true

runs:
  using: composite
  steps:
  - name: Build Output path and Run the DACPAC Deployment script
    shell: powershell
    env:
      ArtifactDownloadPath: ${{ inputs.ArtifactDownloadPath }}
      DatabaseName: ${{ inputs.DatabaseName }}
      ReleaseNumber: ${{ inputs.ReleaseNumber }}
      FileName: ${{ inputs.FileName }}
      targetServer: ${{ inputs.TargetServer }} # optional, if used
      Action: ${{ inputs.Action }}
      PublishProfileFilePath: ${{ inputs.PublishProfileFilePath }}
      GithubActor: ${{ github.actor }}
      SQLPackageDeployProperties: ${{ inputs.SQLPackageDeployProperties }}
      SQLCMDVariables: ${{ inputs.SQLCMDVariables }}
      SQLPackageParameters: ${{ inputs.SQLPackageParameters }}
    run: |
      # Replace #{Octopus.Release.Number} with release number in SQLCMDVariables
      $SQLCMDVariablesUpdated = $env:SQLCMDVariables -replace '#{Octopus.Release.Number}', $env:ReleaseNumber

      function Format-JsonAsKeyValue {
          param (
              [string]$jsonString
          )

          # Check if the JSON string is empty or null
          if ([string]::IsNullOrEmpty($jsonString.Trim())) {
              Write-Host "Warning: JSON string is empty or null. Returning empty string."
              return "" # Or you can return $null or some other value if needed.
          }
          try {
          # Convert JSON string to PowerShell object
          $jsonObject = $jsonString | ConvertFrom-Json
          if ($null -eq $jsonObject) {
            Write-Host "Error: The JSON string is invalid and could not be converted."
            return ""  # Return empty string if the conversion results in null
          }
          } catch {
          Write-Host "Warning: Invalid JSON format. Returning empty string."
          return ""  # Return empty string if there's an error in parsing JSON
          }

          # Format each property as key='value' and join them with commas
          $formattedString = ($jsonObject.psobject.Properties | ForEach-Object { "$($_.Name)='$($_.Value)'" }) -join ","

          return $formattedString
      }

      $parsedSqlPackageDeployPropertiesJson = Format-JsonAsKeyValue -jsonString $env:SQLPackageDeployProperties
      $parsedSqlCMDVariablesJson = Format-JsonAsKeyValue -jsonString $SQLCMDVariablesUpdated
      $parsedSqlPackageParametersJson = Format-JsonAsKeyValue -jsonString $env:SQLPackageParameters

      # Write-Host "parsedSqlPackageDeployPropertiesJson: $parsedSqlPackageDeployPropertiesJson"
      # Write-Host "parsedSqlCMDVariablesJson: $parsedSqlCMDVariablesJson"
      # Write-Host "parsedSqlPackageParametersJson: $parsedSqlPackageParametersJson"

      # Added the lines from 106 to 115 for testing

      # ✅ Validate that FileName is provided
      if ([string]::IsNullOrWhiteSpace($env:FileName)) {
          throw "FileName input is missing. It is required to build OutputPath."
      }

      # ✅ Validate that MATRIX_INSTANCE_LIST is provided
      if ([string]::IsNullOrWhiteSpace($env:MATRIX_INSTANCE_LIST)) {
          throw "MATRIX_INSTANCE_LIST is empty or missing. Cannot proceed with DACPAC deployment."
      }

      $matrixJson = "$env:MATRIX_INSTANCE_LIST"
      if (-not ($matrixJson.Trim().StartsWith('['))) {
          Write-Host "Wrapping single JSON object in an array..."
          $matrixJson = @($matrixJson | ConvertFrom-Json) | ConvertTo-Json -Compress
      }

      Write-Host "Raw MATRIX_INSTANCE_LIST: $matrixJson"
      $parsedMatrix = $matrixJson | ConvertFrom-Json
      $allOutputPaths = ""

      foreach ($item in $parsedMatrix) {
          $instance = $item.instance
          $dbServer = $item.dbServerName
          $role = $item.role
          Write-Host ("Run the Action `${{ inputs.Action }} to - Instance: {0}, Role: {1}, DB Server: {2}" -f $instance, $role, $dbServer)

          $OutputFilePath = ""
          if ($env:Action -in @("DeployReport", "Script")) {
              $OutputFolder = Join-Path $env:ArtifactDownloadPath "deployreports"
              $OutputFileName = "$($env:DatabaseName).$($env:ReleaseNumber).$role.$($env:FileName)"
              $OutputFilePath = Join-Path $OutputFolder $OutputFileName

              $outputFileNameOnly = Split-Path $OutputFilePath -Leaf
              $outputDirectoryOnly = Split-Path $OutputFilePath -Parent

              $sanitizedTargetServer = $env:targetServer.TrimEnd('.')
              $outputFileNameOnlyWithDB = $outputFileNameOnly.Replace('[DatabaseName]', $env:DatabaseName).TrimStart('.')
              $OutputFilePath = Join-Path $outputDirectoryOnly "$sanitizedTargetServer.$outputFileNameOnlyWithDB"
              $env:outputPath = "$OutputFilePath"
              if (!(Test-Path (Split-Path $OutputFilePath))) {
                  New-Item -ItemType Directory -Path (Split-Path $OutputFilePath) -Force
              }
              $allOutputPaths += "$OutputFilePath,"
              $env:outputPath = "$OutputFilePath"
          }

          # Update DBVersion variable in publish profile
          $xml = [xml](Get-Content $env:PublishProfileFilePath)
          $xml.Project.ItemGroup.SqlCmdVariable | Where-Object { $_.Include -eq 'DBVersion' } | ForEach-Object {
              $_.Value = "$env:RELEASE_NUMBER - GitHub Actions by $env:GITHUB_ACTOR ($env:GITHUB_ACTOR)"
          }
          $xml.Save($env:PublishProfileFilePath)

          # Write-Host "Formatted SQLPackageDeployProperties inside loop: $parsedSqlPackageDeployPropertiesJson"

          & $env:scriptPath `
              -Action "${{ inputs.Action }}" `
              -DacpacPath "${{ inputs.DacpacPath }}" `
              # -OutputPath "$OutputFilePath" `
              -OutputPath "$env:outputPath" `
              -ServerInstance "$dbServer" `
              -DatabaseName "${{ inputs.DatabaseName }}" `
              -UserName "${{ inputs.UserName }}" `
              -Password $env:retrievedPassword `
              -SqlPackagePath "${{ inputs.SqlPackagePath }}" `
              -PublishProfilePath "${{ inputs.PublishProfileFilePath }}" `
              -UseMultiSubnetFailover "${{ inputs.UseMultiSubnetFailover }}" `
              -SQLPackageDeployProperties "$parsedSqlPackageDeployPropertiesJson" `
              -SQLCmdVariables "$parsedSqlCMDVariablesJson" `
              -SQLPackageParameters "$parsedSqlPackageParametersJson"
      }

      if ($env:Action -in @("DeployReport", "Script")) {
          $allOutputPaths = $allOutputPaths.TrimEnd(',')
          # Write-Host "allOutputPaths: $allOutputPaths"
          "OutPutPath=$allOutputPaths" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        }

=========================

sql-dacpac-deployer/action.yaml: -

name: 'SQL dacpac action deployment using sqlpackage.exe'
description: 'Using sqlpacakge.exe to perform SQL server DACPAC operations - Deployreport, script, extract & publish'

inputs:
  Action:
    description: 'The action to have sqlpackage.exe execute. One of: extract, deployreport, script, publish'
    required: true
  DacpacPath:
    description: '[Optional] The fully qualified path and file name of the DACPAC to publish.'
    required: false
  PublishProfilePath:
    description: '[Optional] The fully qualified path and file name of the Publish Profile to be applied against the supplied DACPAC'
    required: false
  DatabaseName:
    description: 'The database name the DACPAC is being applied against'
    required: true
  UserName:
    description: 'SQL username to be used for performing actions'
    required: true
  SqlPackagePath:
    description: 'Path to sqlpackage.exe'
    required: true
  # OutputPath:
  #   description: 'Path for the output to be saved'
  #   required: true
  sql-password-parameter-store:
    description: 'Name of SQL password parameter store to fetch from'
    required: true
  ArtifactDownloadPath:
    description: 'Path where the Artifacts will be stored'
    required: true
  ReleaseNumber:
    description: 'Release Number of the build'
    required: true
  EnvironmentName:
    description: 'The name of environment'
    required: true
  FileName:
    description: 'The name of Output File'
    required: true
  TargetServer:
    description: 'The host to deploy the DACPAC to'
    required: true
  PublishProfileFilePath:
    description: 'The fully qualified path and file name of the Publish Profile to be applied against the supplied DACPAC'
    required: true
  UseMultiSubnetFailover:
    description: 'Add multisubnetfailover=true; to the connection string'
    required: true
  SQLPackageDeployProperties:
    description: 'Collection of SQLPackage.exe Properties in JSON format eg {"PropertyName":"PropertyValue","PropertyTwoName":"PropertyTwoValue"}'
    required: true
  SQLCMDVariables:
    description: 'Collection of SQLCMD Variables in JSON format eg {"VariableName":"VariableValue","VariableTwoName":"VariableTwoValue"}'
    required: true
  SQLPackageParameters:
    description: 'Collection of SQLPackage.exe Parameters in JSON format eg {"ParameterName":"ParameterValue","ParameterTwoName":"ParameterTwoValue"}'
    required: true
  ServerInstance:
    description: 'Passing the Server Name'
    required: true

runs:
  using: composite
  steps:
  - name: Initialize OutPutPathFile
    run: |
      if (-not (Test-Path "$env:GITHUB_WORKSPACE\OutPutPath.txt")) {
        New-Item "$env:GITHUB_WORKSPACE\OutPutPath.txt" -ItemType File -Force
      }
    shell: powershell

  - name: Retrieve password & build script path
    shell: powershell
    run: |
      # Retrieve password securely
      $retrievedPassword = & aws ssm get-parameter --name ${{ inputs.sql-password-parameter-store }} --with-decryption --query "Parameter.Value" --output text
      # Exporting to use in next step
      "retrievedPassword=$retrievedPassword" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # Build script path
      $scriptPath = "${{ github.workspace }}\od-gha-files\sqlpackage-runner-fixed.ps1"
      # Exporting to use in next step
      "scriptPath=$scriptPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      "outputPath=" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

  - name: Build Output path and Run the DACPAC Deployment script
    id: run-dacpac-deployment
    uses: ./.github/actions/run-dacpac-deployment
    with:
      ArtifactDownloadPath: '${{ inputs.ArtifactDownloadPath }}'
      DatabaseName: '${{ inputs.DatabaseName }}'
      ReleaseNumber: '${{ inputs.ReleaseNumber }}'
      FileName: '${{ inputs.FileName }}'
      targetServer: '${{ inputs.TargetServer }}' # optional, if used
      ServerInstance: '${{ inputs.TargetServer }}'
      Action: '${{ inputs.Action }}'
      PublishProfileFilePath: '${{ inputs.PublishProfileFilePath }}'
      GithubActor: '${{ github.actor }}'
      SQLPackageDeployProperties: '${{ inputs.SQLPackageDeployProperties }}'
      SQLCMDVariables: '${{ inputs.SQLCMDVariables }}'
      SQLPackageParameters: '${{ inputs.SQLPackageParameters }}'
      SqlPackagePath: '${{ inputs.SqlPackagePath }}'
      DacpacPath: '${{ inputs.DacpacPath }}'
      UserName: '${{ inputs.UserName }}'

==========================================

    - name: DeployReport DACPAC
      id: deploy-report
      uses: ./.github/actions/sql-dacpac-deployer
      with:
        Action: "DeployReport"
        DacpacPath: "${{ github.workspace }}\\packages\\Employee.Invitation.Database.Build.dacpac"
        DatabaseName: "${{ env.DB_NAME }}"
        UserName: "${{ env.SQL_USER_NAME }}"
        SqlPackagePath: "${{ env.SQLPACKAGE_DIR }}\\sqlpackage.exe"
        sql-password-parameter-store: "${{ env.SQL_PASSWORD_PARAMETER_STORE }}"
        ArtifactDownloadPath: "${{ github.workspace }}\\dacpacs"
        ReleaseNumber: "${{ env.RELEASE_NUMBER }}"
        EnvironmentName: "${{ env.DACPAC_ENVIRONMENT }}"
        FileName: "deployreport.xml"
        TargetServer: ${{ env.TARGET_SERVERS }}
        PublishProfileFilePath: "${{ github.workspace }}\\packages\\${{ env.PUBLISH_PROFILE_FILE_NAME }}"
        UseMultiSubnetFailover: ${{ env.MULTI_SUBNET_FAILOVER }}
        SQLPackageDeployProperties: ${{ env.SQL_PACKAGE_DEPLOY_PROPERTIES }}
        SQLCMDVariables: ""
        SQLPackageParameters: ${{ env.SQL_PACKAGE_PARAMETERS }}

=======================================

SqlPackageHelper.psm1: -

function Format-SqlCmdVariables {
    param([hashtable]$SqlCmdVariables)
    $formatted = ""
    foreach ($kv in $SqlCmdVariables.GetEnumerator()) {
        $formatted += "/v:`"$($kv.Key)=$($kv.Value)`" "
    }
    return $formatted
}

function Format-SqlPackageParameters {
    param([hashtable]$Parameters)
    $formatted = ""
    foreach ($kv in $Parameters.GetEnumerator()) {
        $formatted += "/v:`"$($kv.Key)=$($kv.Value)`" "
    }
    return $formatted
}

function Format-SqlPackageProperties {
    param([hashtable]$Properties)
    $formatted = ""
    foreach ($kv in $Properties.GetEnumerator()) {
        $formatted += "/p:`"$($kv.Key)=$($kv.Value)`" "
    }
    return $formatted
}

function New-SqlPackageCommand {
    <#
        .DESCRIPTION
        Builds a SQL Package command to be invoked, based on the Action chosen.
    #>
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)][ValidateSet('Script', 'DeployReport', 'Extract', 'Publish')] [string] $Action,
        [Parameter(Mandatory = $true)][string] $DacpacFilePath,
        [Parameter(Mandatory = $true)][string] $PublishProfileFilePath,
        [string] $OutputFilePath,
        [hashtable] $SqlCmdVariables = @{},
        [hashtable] $SqlPackageParameters = @{},
        [hashtable] $SqlPackageProperties = @{},
        [string] $ConnectionString = ''
    )

    trap { throw $_ }

    $cmd = ""
    $cmd += "/Action:`"$Action`" "
    $cmd += "/Profile:`"$PublishProfileFilePath`" "
    $cmd += Format-SqlCmdVariables -SqlCmdVariables $SqlCmdVariables
    $cmd += Format-SqlPackageParameters -Parameters $SqlPackageParameters
    $cmd += Format-SqlPackageProperties -Properties $SqlPackageProperties

    $dacpacFilePathSwitch = "/SourceFile:`"$DacpacFilePath`" "
    if ($Action -eq 'Extract') {
        $dacpacFilePathSwitch = "/TargetFile:`"$DacpacFilePath`" "
    }
    $cmd += $dacpacFilePathSwitch

    if (![string]::IsNullOrEmpty($ConnectionString)) {
        $customConnectionString = if ($Action -eq 'Extract') {
            "/SourceConnectionString:`"$ConnectionString`""
        } else {
            "/TargetConnectionString:`"$ConnectionString`""
        }
        $cmd += "$customConnectionString "
    }

    if (($Action -eq 'Script' -or $Action -eq 'DeployReport') -and ![string]::IsNullOrEmpty($OutputFilePath)) {
        $cmd += "/OutputPath:`"$OutputPath`" "
    }

    return $cmd.Trim()
}

======================================

sqlpackage-runner-fixed.ps1: -

param (
    [string]$Action,
    [string]$DacpacPath,
    [string]$PublishProfilePath = "",
    [string]$ServerInstance,
    [string]$DatabaseName,
    [string]$UserName,
    [string]$Password,
    [string]$SqlPackagePath,
    [string]$OutputPath = "",
    [string]$UseMultiSubnetFailover,
    [string]$SQLPackageDeployProperties = "",
    [string]$SQLCmdVariables = "",
    [string]$SQLPackageParameters = ""
)

$ErrorActionPreference = "Stop"
Write-Host "Script started. Action: $Action"

# Import custom module
$ScriptDir = Split-Path -Path $MyInvocation.MyCommand.Definition -Parent
$ModulePath = Join-Path $ScriptDir "modules\SqlPackageHelper.psm1"
Import-Module $ModulePath -Force
Write-Host "Imported SqlPackageHelper module from $ModulePath"

# Validate sqlpackage.exe
if (-not (Test-Path $SqlPackagePath)) {
    throw "sqlpackage.exe not found at: $SqlPackagePath"
}

# Ensure output folder exists
if ($OutputPath -ne "") {
    $folder = Split-Path -Path $OutputPath -Parent
    if (-not (Test-Path $folder)) {
        Write-Host "Creating output directory: $folder"
        New-Item -Path $folder -ItemType Directory -Force | Out-Null
    }
}

# Build connection string
$ConnectionString = "Server=$ServerInstance;Database=$DatabaseName;User=$UserName;Password=$Password;Encrypt=True;TrustServerCertificate=True;"
if ($UseMultiSubnetFailover) { $ConnectionString += "multisubnetfailover=true;" }

# Helper to convert comma-separated string to hashtable
function ConvertTo-HashtableFromString {
    param([string]$input)
    $hash = @{}
    if (![string]::IsNullOrWhiteSpace($input)) {
        foreach ($pair in $input -split ',') {
            $kv = $pair -split '='
            if ($kv.Count -eq 2) {
                $hash[$kv[0].Trim()] = $kv[1].Trim()
            }
        }
    }
    return $hash
}

$sqlCmdVariableCollection = ConvertTo-HashtableFromString -input $SQLCmdVariables
$sqlPackagePropertyCollection = ConvertTo-HashtableFromString -input $SQLPackageDeployProperties
$sqlPackageParameterCollection = ConvertTo-HashtableFromString -input $SQLPackageParameters

# Generate SQLPackage command
$sqlPackageCommand = New-SqlPackageCommand -Action $Action `
    -DacpacFilePath $DacpacPath `
    -PublishProfileFilePath $PublishProfilePath `
    -OutputFilePath $OutputPath `
    -SqlCmdVariables $sqlCmdVariableCollection `
    -SqlPackageProperties $sqlPackagePropertyCollection `
    -SqlPackageParameters $sqlPackageParameterCollection `
    -ConnectionString $ConnectionString

$fullCommand = "& `"$SqlPackagePath`" $sqlPackageCommand"
Write-Host "Executing full sqlpackage.exe command: $fullCommand"

# Retry logic
$maxRetries = 3
$retryDelaySeconds = 5
$attempt = 1
$success = $false

while ($attempt -le $maxRetries -and -not $success) {
    Write-Host "Attempt ${attempt} of ${maxRetries}: Running sqlpackage.exe..."

    try {
        Invoke-Expression $fullCommand

        if ($LASTEXITCODE -eq 0) {
            if ($Action -in @("DeployReport", "Script") -and -not (Test-Path $OutputPath)) {
                throw "$Action succeeded but output file not found at: $OutputPath"
            }

            Write-Host "sqlpackage executed successfully on attempt $attempt"
            $success = $true
        } else {
            throw "sqlpackage failed with exit code $LASTEXITCODE"
        }
    } catch {
        Write-Warning "sqlpackage failed on attempt ${attempt}: $_"
        if ($attempt -lt $maxRetries) {
            Write-Host "Retrying in $retryDelaySeconds seconds..."
            Start-Sleep -Seconds $retryDelaySeconds
        } else {
            throw "sqlpackage failed after $maxRetries attempts."
        }
    }

    $attempt++
}

Write-Host "Completed successfully"
