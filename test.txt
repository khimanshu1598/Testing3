#< CLIXML
<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04"><Obj S="progress" RefId="0"><TN RefId="0"><T>System.Management.Automation.PSCustomObject</T><T>System.Object</T></TN><MS><I64 N="SourceId">1</I64><PR N="Record"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj><S S="Error">i-047d18e2e899594e4 : The term 'i-047d18e2e899594e4' is not recognized as the name of a cmdlet, function, script file, _x000D__x000A_</S><S S="Error">or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and _x000D__x000A_</S><S S="Error">try again._x000D__x000A_</S><S S="Error">At line:1 char:19_x000D__x000A_</S><S S="Error">+ $serverInstance = i-047d18e2e899594e4_x000D__x000A_</S><S S="Error">+                   ~~~~~~~~~~~~~~~~~~~_x000D__x000A_</S><S S="Error">    + CategoryInfo          : ObjectNotFound: (i-047d18e2e899594e4:String) [], CommandNotFoundException_x000D__x000A_</S><S S="Error">    + FullyQualifiedErrorId : CommandNotFoundException_x000D__x000A_</S><S S="Error"> _x000D__x000A_</S><Obj S="progress" RefId="1"><TNRef RefId="0" /><MS><I64 N="SourceId">1</I64><PR N="Record"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj><Obj S="progress" RefId="2"><TNRef RefId="0" /><MS><I64 N="SourceId">1</I64><PR N="Record"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj><S S="Error">DBA : The term 'DBA' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the _x000D__x000A_</S><S S="Error">spelling of the name, or if a path was included, verify that the path is correct and try again._x000D__x000A_</S><S S="Error">At line:2 char:17_x000D__x000A_</S><S S="Error">+ $databaseName = DBA_x000D__x000A_</S><S S="Error">+                 ~~~_x000D__x000A_</S><S S="Error">    + CategoryInfo          : ObjectNotFound: (DBA:String) [], CommandNotFoundException_x000D__x000A_</S><S S="Error">    + FullyQualifiedErrorId : CommandNotFoundException_x000D__x000A_</S><S S="Error"> _x000D__x000A_</S><Obj S="progress" RefId="3"><TNRef RefId="0" /><MS><I64 N="SourceId">1</I64><PR N="Record"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj><Obj S="progress" RefId="4"><TNRef RefId="0" /><MS><I64 N="SourceId">1</I64><PR N="Record"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj><S S="Error">HimanshuSuccessUser : The term 'HimanshuSuccessUser' is not recognized as the name of a cmdlet, function, script file, _x000D__x000A_</S><S S="Error">or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and _x000D__x000A_</S><S S="Error">try again._x000D__x000A_</S><S S="Error">At line:3 char:16_x000D__x000A_</S><S S="Error">+ $sqlUserName = HimanshuSuccessUser_x000D__x000A_</S><S S="Error">+                ~~~~~~~~~~~~~~~~~~~_x000D__x000A_</S><S S="Error">    + CategoryInfo          : ObjectNotFound: (HimanshuSuccessUser:String) [], CommandNotFoundException_x000D__x000A_</S><S S="Error">    + FullyQualifiedErrorId : CommandNotFoundException_x000D__x000A_</S><S S="Error"> _x000D__x000A_</S><Obj S="progress" RefId="5"><TNRef RefId="0" /><MS><I64 N="SourceId">1</I64><PR N="Record"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj><Obj S="progress" RefId="6"><TNRef RefId="0" /><MS><I64 N="SourceId">1</I64><PR N="Record"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj><S S="Error">param : The term 'param' is not recognized as the name of a cmdlet, function, script file, or operable program. Check _x000D__x000A_</S><S S="Error">the spelling of the name, or if a path was included, verify that the path is correct and try again._x000D__x000A_</S><S S="Error">At line:7 char:1_x000D__x000A_</S><S S="Error">+ param (_x000D__x000A_</S><S S="Error">+ ~~~~~_x000D__x000A_</S><S S="Error">    + CategoryInfo          : ObjectNotFound: (param:String) [], CommandNotFoundException_x000D__x000A_</S><S S="Error">    + FullyQualifiedErrorId : CommandNotFoundException_x000D__x000A_</S><S S="Error"> _x000D__x000A_</S><Obj S="progress" RefId="7"><TNRef RefId="0" /><MS><I64 N="SourceId">1</I64><PR N="Record"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj><Obj S="progress" RefId="8"><TNRef RefId="0" /><MS><I64 N="SourceId">1</I64><PR N="Record"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj><Obj S="progress" RefId="9"><TNRef RefId="0" /><MS><I64 N="SourceId">1</I64><PR N="Record"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj><S S="Error">$serverInstance = i-047d18e2e899594e4_x000D__x000A_</S><S S="Error">$databaseName = DBA_x000D__x000A_</S><S S="Error">$sqlUserName = HimanshuSuccessUser_x000D__x000A_</S><S S="Error">$sqlPassword = "7+Y*dnT#5kW3"_x000D__x000A_</S><S S="Error">$adUserSsmPassword = '/secure/dbpassword'_x000D__x000A_</S><S S="Error">$sqlActivity = 'create-user'_x000D__x000A_</S><S S="Error">param (_x000D__x000A_</S><S S="Error">    [string]$serverInstance,_x000D__x000A_</S><S S="Error">    [string]$databaseName,_x000D__x000A_</S><S S="Error">    [string]$sqlUserName,_x000D__x000A_</S><S S="Error">    [string]$sqlPassword,_x000D__x000A_</S><S S="Error">    [string]$adUserSsmPassword,_x000D__x000A_</S><S S="Error">    [string]$sqlActivity_x000D__x000A_</S><S S="Error">)_x000D__x000A_</S><S S="Error"># Import required Windows API functions_x000D__x000A_</S><S S="Error">Add-Type -TypeDefinition @"_x000D__x000A_</S><S S="Error">using System;_x000D__x000A_</S><S S="Error">using System.Runtime.InteropServices;_x000D__x000A_</S><S S="Error">public class Win32 {_x000D__x000A_</S><S S="Error">    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]_x000D__x000A_</S><S S="Error">    public static extern bool LogonUser(_x000D__x000A_</S><S S="Error">        String username,_x000D__x000A_</S><S S="Error">        String domain,_x000D__x000A_</S><S S="Error">        IntPtr password,_x000D__x000A_</S><S S="Error">        int logonType,_x000D__x000A_</S><S S="Error">        int logonProvider,_x000D__x000A_</S><S S="Error">        ref IntPtr token);_x000D__x000A_</S><S S="Error">    [DllImport("kernel32.dll")]_x000D__x000A_</S><S S="Error">    public static extern bool CloseHandle(IntPtr handle);_x000D__x000A_</S><S S="Error">}_x000D__x000A_</S><S S="Error">"@_x000D__x000A_</S><S S="Error"># # Function to generate a random strong password_x000D__x000A_</S><S S="Error"># function Generate-RandomPassword {_x000D__x000A_</S><S S="Error">#     $length = 16_x000D__x000A_</S><S S="Error">#     $characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*()_-+=&lt;&gt;?"_x000D__x000A_</S><S S="Error">#     $random = New-Object System.Random_x000D__x000A_</S><S S="Error">#     $password = -join ((1..$length) | ForEach-Object { $characters[$random.Next(0, $characters.Length)] })_x000D__x000A_</S><S S="Error">#     return $password_x000D__x000A_</S><S S="Error"># }_x000D__x000A_</S><S S="Error"># # Generate a random password for the SQL user_x000D__x000A_</S><S S="Error"># $sqlPassword = Generate-RandomPassword_x000D__x000A_</S><S S="Error"># Write-Host "SQL-Password: $sqlPassword"_x000D__x000A_</S><S S="Error"># Create credential object_x000D__x000A_</S><S S="Error">$username = "XOAWSUAT\svc_octopustentacle"       # Change Domain username_x000D__x000A_</S><S S="Error">$ssmPassword = Get-SSMParameter -Name $adUserSsmPassword -WithDecryption $True    # Change the SSM Parameter name_x000D__x000A_</S><S S="Error">$password = ConvertTo-SecureString $ssmPassword.Value -AsPlainText -Force_x000D__x000A_</S><S S="Error">$credential = New-Object System.Management.Automation.PSCredential($username, $password)_x000D__x000A_</S><S S="Error"># Split domain and username_x000D__x000A_</S><S S="Error">$domainName = $credential.UserName.Split('\')[0]_x000D__x000A_</S><S S="Error">$userName = $credential.UserName.Split('\')[1]_x000D__x000A_</S><S S="Error"># Constants for LogonUser_x000D__x000A_</S><S S="Error">$LOGON32_LOGON_NETWORK = 3_x000D__x000A_</S><S S="Error">$LOGON32_PROVIDER_DEFAULT = 0_x000D__x000A_</S><S S="Error">$tokenHandle = [IntPtr]::Zero_x000D__x000A_</S><S S="Error">$passwordPtr = [IntPtr]::Zero_x000D__x000A_</S><S S="Error">try {_x000D__x000A_</S><S S="Error">    # Convert SecureString to IntPtr_x000D__x000A_</S><S S="Error">    $passwordPtr = [System.Runtime.InteropServices.Marshal]::SecureStringToGlobalAllocUnicode($credential.Password)_x000D__x000A_</S><S S="Error">    _x000D__x000A_</S><S S="Error">    # Attempt to get user token_x000D__x000A_</S><S S="Error">    $result = [Win32]::LogonUser(_x000D__x000A_</S><S S="Error">        $userName,_x000D__x000A_</S><S S="Error">        $domainName,_x000D__x000A_</S><S S="Error">        $passwordPtr,_x000D__x000A_</S><S S="Error">        $LOGON32_LOGON_NETWORK,_x000D__x000A_</S><S S="Error">        $LOGON32_PROVIDER_DEFAULT,_x000D__x000A_</S><S S="Error">        [ref]$tokenHandle)_x000D__x000A_</S><S S="Error">    if ($result) {_x000D__x000A_</S><S S="Error">        # Impersonate the user_x000D__x000A_</S><S S="Error">        $identityContext = [System.Security.Principal.WindowsIdentity]::Impersonate($tokenHandle)_x000D__x000A_</S><S S="Error">        # SQL Server connection details_x000D__x000A_</S><S S="Error">        # $serverInstance = "GSQN-MB48C2.uat.aws.xero.com"_x000D__x000A_</S><S S="Error">        # $database = "DBA"_x000D__x000A_</S><S S="Error">        $connectionString = "Server=$serverInstance;Database=$database;Integrated _x000D__x000A_</S><S S="Error">Security=True;Encrypt=False;TrustServerCertificate=True;"_x000D__x000A_</S><S S="Error">        $connection = New-Object System.Data.SqlClient.SqlConnection_x000D__x000A_</S><S S="Error">        $connection.ConnectionString = $connectionString_x000D__x000A_</S><S S="Error">        try {_x000D__x000A_</S><S S="Error">            # Open connection to SQL Server_x000D__x000A_</S><S S="Error">            $connection.Open()_x000D__x000A_</S><S S="Error">            # Only generate SQLScript if 'create-user' is passed in the activity parameter_x000D__x000A_</S><S S="Error">            if ($sqlActivity -eq "create-user") {_x000D__x000A_</S><S S="Error">        # SQL Query to create login, user, and assign db_owner role_x000D__x000A_</S><S S="Error">        $sqlScript = @"_x000D__x000A_</S><S S="Error">        -- Create a login at the SQL Server level (with SQL Server Authentication)_x000D__x000A_</S><S S="Error">        CREATE LOGIN $sqlUserName WITH PASSWORD = '$sqlPassword';_x000D__x000A_</S><S S="Error">        -- Use the database_x000D__x000A_</S><S S="Error">        USE $databaseName;_x000D__x000A_</S><S S="Error">        -- Create a user in the database that maps to the login created_x000D__x000A_</S><S S="Error">        CREATE USER $sqlUserName FOR LOGIN $sqlUserName;_x000D__x000A_</S><S S="Error">            EXEC sp_addrolemember N'db_datareader', '$sqlUserName';_x000D__x000A_</S><S S="Error">            EXEC sp_addrolemember N'db_owner', '$sqlUserName';_x000D__x000A_</S><S S="Error">            EXEC sp_addrolemember N'db_accessadmin', '$sqlUserName';_x000D__x000A_</S><S S="Error">            EXEC sp_addrolemember N'db_ddladmin', '$sqlUserName';_x000D__x000A_</S><S S="Error">            EXEC sp_addsrvrolemember N'$sqlUserName', N'sysadmin';_x000D__x000A_</S><S S="Error">"@_x000D__x000A_</S><S S="Error">        _x000D__x000A_</S><S S="Error">        } elseif ($sqlActivity -eq "validate-delete-user") {_x000D__x000A_</S><S S="Error">        $sqlScript = @"_x000D__x000A_</S><S S="Error">        -- Use the database_x000D__x000A_</S><S S="Error">        USE $databaseName;_x000D__x000A_</S><S S="Error">        -- Check if UserA exists in the database_x000D__x000A_</S><S S="Error">        IF EXISTS (SELECT 1 FROM sys.database_principals WHERE name = '$sqlUserName' AND type IN ('S', 'U'))_x000D__x000A_</S><S S="Error">        BEGIN_x000D__x000A_</S><S S="Error">            -- Drop the user if it exists_x000D__x000A_</S><S S="Error">            PRINT '$sqlUserName found. Dropping user and login...';_x000D__x000A_</S><S S="Error">            _x000D__x000A_</S><S S="Error">            -- Drop the user in the database_x000D__x000A_</S><S S="Error">            DROP USER $sqlUserName;_x000D__x000A_</S><S S="Error">            _x000D__x000A_</S><S S="Error">            -- Drop the login associated with the user_x000D__x000A_</S><S S="Error">            DROP LOGIN $sqlUserName;_x000D__x000A_</S><S S="Error">            _x000D__x000A_</S><S S="Error">            PRINT '$sqlUserName and login have been dropped successfully.';_x000D__x000A_</S><S S="Error">        END_x000D__x000A_</S><S S="Error">        ELSE_x000D__x000A_</S><S S="Error">        BEGIN_x000D__x000A_</S><S S="Error">            PRINT '$sqlUserName does not exist in the database.';_x000D__x000A_</S><S S="Error">        END_x000D__x000A_</S><S S="Error">"@_x000D__x000A_</S><S S="Error">        } else {    _x000D__x000A_</S><S S="Error">            $sqlScript = @"_x000D__x000A_</S><S S="Error">        -- Use the database_x000D__x000A_</S><S S="Error">        USE $databaseName;_x000D__x000A_</S><S S="Error">        -- Delete a user in the database that maps to the login created_x000D__x000A_</S><S S="Error">        DROP USER $sqlUserName;_x000D__x000A_</S><S S="Error">        DROP LOGIN $sqlUserName;_x000D__x000A_</S><S S="Error">"@_x000D__x000A_</S><S S="Error">        }_x000D__x000A_</S><S S="Error">            _x000D__x000A_</S><S S="Error">            # Execute the SQL script_x000D__x000A_</S><S S="Error">            $command = $connection.CreateCommand()_x000D__x000A_</S><S S="Error">            $command.CommandText = $sqlScript_x000D__x000A_</S><S S="Error">            $command.ExecuteNonQuery()_x000D__x000A_</S><S S="Error">            Write-Host "SQL script executed successfully."_x000D__x000A_</S><S S="Error">        } catch {_x000D__x000A_</S><S S="Error">            Write-Error "Error executing SQL script: $_"_x000D__x000A_</S><S S="Error">        } finally {_x000D__x000A_</S><S S="Error">            $connection.Close()_x000D__x000A_</S><S S="Error">            $identityContext.Undo()_x000D__x000A_</S><S S="Error">        }_x000D__x000A_</S><S S="Error">    }_x000D__x000A_</S><S S="Error">    else {_x000D__x000A_</S><S S="Error">        throw [System.ComponentModel.Win32Exception][System.Runtime.InteropServices.Marshal]::GetLastWin32Error()_x000D__x000A_</S><S S="Error">    }_x000D__x000A_</S><S S="Error">}_x000D__x000A_</S><S S="Error">finally {_x000D__x000A_</S><S S="Error">    # Cleanup_x000D__x000A_</S><S S="Error">    if ($passwordPtr -ne [IntPtr]::Zero) {_x000D__x000A_</S><S S="Error">        [System.Runtime.InteropServices.Marshal]::ZeroFreeGlobalAllocUnicode($passwordPtr)_x000D__x000A_</S><S S="Error">    }_x000D__x000A_</S><S S="Error">    if ($tokenHandle -ne [IntPtr]::Zero) {_x000D__x000A_</S><S S="Error">        [Win32]::CloseHandle($tokenHandle)_x000D__x000A_</S><S S="Error">    }_x000D__x000A_</S><S S="Error">} : Error executing SQL script: Exception calling "ExecuteNonQuery" with "0" argument(s): "Incorrect syntax near the _x000D__x000A_</S><S S="Error">keyword 'WITH'."_x000D__x000A_</S><S S="Error">    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException_x000D__x000A_</S><S S="Error">    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException_x000D__x000A_</S><S S="Error"> _x000D__x000A_</S></Objs>
