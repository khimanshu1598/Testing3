param (
    [string]$Action,
    [string]$DacpacPath,
    [string]$PublishProfilePath = "",
    [string]$ServerInstance,
    [string]$DatabaseName,
    [string]$UserName,
    [string]$Password,
    [string]$SqlPackagePath,
    [string]$OutputPath = "",
    [string]$UseMultiSubnetFailover,
    [string]$SQLPackageDeployProperties,
    [string]$SQLCmdVariables = "",
    [string]$SQLPackageParameters = ""
)

$ErrorActionPreference = "Stop"
Write-Host "Script started. Action: $Action"

# --- Helper Functions ---

function Format-SqlCmdVariables {
    [CmdletBinding()]
    param (
        [AllowNull()][Parameter(Mandatory=$true)][hashtable]$SqlCmdVariables
    )
    trap { throw $_ }

    [string]$result = ''
    if ($SqlCmdVariables -ne $null) {
        foreach ($variable in $SqlCmdVariables.GetEnumerator()) {
            $result += "/Variables:$($variable.Name)='$($variable.Value)' "
        }
    }
    return $result
}

function Format-SqlPackageParameters {
    [CmdletBinding()]
    param (
        [AllowNull()][Parameter(Mandatory=$true)][hashtable]$Parameters
    )
    trap { throw $_ }

    [string]$result = ''
    if ($Parameters -ne $null) {
        foreach ($variable in $Parameters.GetEnumerator()) {
            if (($variable.Value -is [int]) -or ($variable.Value -is [bool])) {
                $result += "/$($variable.Name):$($variable.Value) "
            } else {
                $result += "/$($variable.Name):'$($variable.Value)' "
            }
        }
    }
    return $result
}

function Format-SqlPackageProperties {
    [CmdletBinding()]
    param (
        [AllowNull()][Parameter(Mandatory=$true)][hashtable]$Properties
    )
    trap { throw $_ }

    [string]$result = ''
    if ($Properties -ne $null) {
        foreach ($variable in $Properties.GetEnumerator()) {
            if (($variable.Value -is [int]) -or ($variable.Value -is [bool])) {
                $result += "/p:$($variable.Name)=$($variable.Value) "
            } else {
                $result += "/p:$($variable.Name)='$($variable.Value)' "
            }
        }
    }
    return $result
}

function New-SqlPackageCommand {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory=$true)][ValidateSet('Script', 'DeployReport', 'Extract', 'Publish')][string]$Action,
        [Parameter(Mandatory=$true)][string]$DacpacFilePath,
        [Parameter(Mandatory=$true)][string]$PublishProfileFilePath,
        [string]$OutputFilePath,
        [AllowNull()][hashtable]$SqlCmdVariables = @{},
        [AllowNull()][hashtable]$SqlPackageParameters = @{},
        [AllowNull()][hashtable]$SqlPackageProperties = @{},
        [string]$ConnectionString = ''
    )
    trap { throw $_ }

    $cmd = "/Action:$Action /Profile=`"$PublishProfileFilePath`" "

    $cmd += Format-SqlCmdVariables -SqlCmdVariables $SqlCmdVariables
    $cmd += Format-SqlPackageParameters -Parameters $SqlPackageParameters
    $cmd += Format-SqlPackageProperties -Properties $SqlPackageProperties

    $dacpacFilePathSwitch = "/SourceFile:`"$DacpacFilePath`" "
    if ($Action -eq 'Extract') {
        $dacpacFilePathSwitch = "/TargetFile:`"$DacpacFilePath`" "
    }
    $cmd += $dacpacFilePathSwitch

    if (![string]::IsNullOrEmpty($ConnectionString)) {
        $customConnectionString = "/TargetConnectionString:`"$ConnectionString`""
        if ($Action -eq 'Extract') {
            $customConnectionString = "/SourceConnectionString:`"$ConnectionString`""
        }
        $cmd += "$customConnectionString"
    }

    if (($Action -eq 'Script' -or $Action -eq 'DeployReport') -and ![string]::IsNullOrEmpty($OutputFilePath)) {
        $cmd += "/OutputPath:`"$OutputFilePath`" "
    }

    return $cmd
}

# --- Main Script Logic ---

# Validate sqlpackage.exe path
if (-not (Test-Path $SqlPackagePath)) {
    throw "sqlpackage.exe not found at: $SqlPackagePath"
}

# Ensure Output folder exists
if ($OutputPath -ne "") {
    $folder = Split-Path -Path $OutputPath -Parent
    if (-not (Test-Path $folder)) {
        Write-Host "Creating output directory: $folder"
        New-Item -Path $folder -ItemType Directory -Force | Out-Null
    }
}

# Build Connection String
$ConnectionString = "Server=$ServerInstance;Database=$DatabaseName;User=$UserName;Password=$Password;Encrypt=True;TrustServerCertificate=True;"
if ($UseMultiSubnetFailover) {
    $ConnectionString += "multisubnetfailover=true;"
}

# --- Parse Inputs to Hashtables ---

$null = $sqlCmdVariableCollection = @{}
$null = $sqlPackageParameterCollection = @{}
$null = $sqlPackagePropertyCollection = @{}

# SQLCmdVariables
if (![string]::IsNullOrWhiteSpace($SQLCmdVariables)) {
    try {
        (ConvertFrom-Json $SQLCmdVariables).psobject.properties | ForEach-Object {
            $sqlCmdVariableCollection[$_.Name] = $_.Value
        }
        Write-Host "Parsed SqlCmdVariables successfully."
    } catch {
        Write-Warning "⚠️ Failed to parse SqlCmdVariables. Input was not valid JSON. Value: $SQLCmdVariables"
    }
} else {
    Write-Host "ℹ️ SqlCmdVariables is empty."
}

# SQLPackageParameters
if (![string]::IsNullOrWhiteSpace($SQLPackageParameters)) {
    try {
        (ConvertFrom-Json $SQLPackageParameters).psobject.properties | ForEach-Object {
            $sqlPackageParameterCollection[$_.Name] = $_.Value
        }
        Write-Host "Parsed SqlPackageParameters successfully."
    } catch {
        Write-Warning "⚠️ Failed to parse SqlPackageParameters. Input was not valid JSON. Value: $SQLPackageParameters"
    }
} else {
    Write-Host "ℹ️ SqlPackageParameters is empty."
}

# SQLPackageDeployProperties
if (![string]::IsNullOrWhiteSpace($SQLPackageDeployProperties)) {
    try {
        (ConvertFrom-Json $SQLPackageDeployProperties).psobject.properties | ForEach-Object {
            $sqlPackagePropertyCollection[$_.Name] = $_.Value
        }
        Write-Host "Parsed SQLPackageDeployProperties successfully."
    } catch {
        Write-Warning "⚠️ Failed to parse SQLPackageDeployProperties. Input was not valid JSON. Value: $SQLPackageDeployProperties"
    }
} else {
    Write-Host "ℹ️ SQLPackageDeployProperties is empty."
}

# --- Build final sqlpackage.exe Command ---

$finalCmd = New-SqlPackageCommand `
    -Action $Action `
    -DacpacFilePath $DacpacPath `
    -PublishProfileFilePath $PublishProfilePath `
    -OutputFilePath $OutputPath `
    -SqlCmdVariables $sqlCmdVariableCollection `
    -SqlPackageParameters $sqlPackageParameterCollection `
    -SqlPackageProperties $sqlPackagePropertyCollection `
    -ConnectionString $ConnectionString

Write-Host "`nExecuting full sqlpackage.exe command:"
Write-Host "`"$SqlPackagePath`" $finalCmd"

# --- Execute with Retry ---

$maxRetries = 3
$retryDelaySeconds = 5
$attempt = 1
$success = $false

while ($attempt -le $maxRetries -and -not $success) {
    Write-Host "Attempt ${attempt} of ${maxRetries}: Running sqlpackage.exe..."
    try {
        & $SqlPackagePath $finalCmd
        if ($LASTEXITCODE -eq 0) {
            $success = $true
            Write-Host "✅ sqlpackage executed successfully on attempt $attempt"
        } else {
            throw "❌ sqlpackage failed with exit code $LASTEXITCODE"
        }
    } catch {
        Write-Warning "⚠️ sqlpackage failed on attempt ${attempt}: $_"
        if ($attempt -lt $maxRetries) {
            Write-Host "⏳ Retrying in $retryDelaySeconds seconds..."
            Start-Sleep -Seconds $retryDelaySeconds
        } else {
            throw "❌ sqlpackage failed after $maxRetries attempts."
        }
    }
    $attempt++
}

Write-Host "✅ Script completed successfully"


####################

*** Unrecognized command line argument 'Profile=C'.
WARNING: sqlpackage failed on attempt 1: sqlpackage failed with exit code 1
Retrying in 5 seconds...
Attempt 2 of 3: Running sqlpackage.exe...
*** Unrecognized command line argument 'Profile=C'.
WARNING: sqlpackage failed on attempt 2: sqlpackage failed with exit code 1
Retrying in 5 seconds...
Attempt 3 of 3: Running sqlpackage.exe...
*** Unrecognized command line argument 'Profile=C'.
WARNING: sqlpackage failed on attempt 3: sqlpackage failed with exit code 1
sqlpackage failed after 3 attempts.
At C:\actions-runner\_work\expenses-employee-invitation-api\expenses-employee-invitation-api\od-gha-files\sqlpackage-ru
nner-fixed.ps1:409 char:13
+             throw "sqlpackage failed after $maxRetries attempts."
+             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OperationStopped: (sqlpackage failed after 3 attempts.:String) [], RuntimeException
    + FullyQualifiedErrorId : sqlpackage failed after 3 attempts.
 
Error: Process completed with exit code 1.
