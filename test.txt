    - name: ðŸ§ª Extract DACPAC
      run: |
        $retrievedPassword = aws ssm get-parameter --name $env:SQL_PASSWORD_PARAMETER_STORE --with-decryption --query "Parameter.Value" --output text
        powershell -ExecutionPolicy Bypass -File "${{ github.workspace }}/od-gha-files/sqlpackage-runner-fixed.ps1" `
          -Action Extract `
          -OutputPath "${{ github.workspace }}\dacpacs\DBA-extracted.dacpac" `
          -ServerInstance "${{ env.DB_SERVER_NAME }}" `
          -DatabaseName "DBA" `
          -UserName "${{ env.SQL_USER_NAME }}" `
          -Password "$retrievedPassword" `
          -SqlPackagePath "${{ env.SQLPACKAGE_DIR }}\sqlpackage.exe"
      shell: powershell

    - name: ðŸ§ª DeployReport DACPAC
      run: |
        $retrievedPassword = aws ssm get-parameter --name $env:SQL_PASSWORD_PARAMETER_STORE --with-decryption --query "Parameter.Value" --output text
        powershell -ExecutionPolicy Bypass -File "${{ github.workspace }}/od-gha-files/sqlpackage-runner-fixed.ps1" `
          -Action DeployReport `
          -DacpacPath: "${{ github.workspace }}\dacpacs\DBA-extracted.dacpac"
          -OutputPath "${{ github.workspace }}\dacpacs\DBA.xml" `
          -ServerInstance "${{ env.DB_SERVER_NAME }}" `
          -DatabaseName "DBA" `
          -UserName "${{ env.SQL_USER_NAME }}" `
          -Password "$retrievedPassword" `
          -SqlPackagePath "${{ env.SQLPACKAGE_DIR }}\sqlpackage.exe"
      shell: powershell

    - name: ðŸ§ª Script DACPAC
      run: |
        $retrievedPassword = aws ssm get-parameter --name $env:SQL_PASSWORD_PARAMETER_STORE --with-decryption --query "Parameter.Value" --output text
        powershell -ExecutionPolicy Bypass -File "${{ github.workspace }}/od-gha-files/sqlpackage-runner-fixed.ps1" `
          -Action Script `
          -DacpacPath: "${{ github.workspace }}\dacpacs\DBA-extracted.dacpac"
          -OutputPath "${{ github.workspace }}\dacpacs\DBA.sql" `
          -ServerInstance "${{ env.DB_SERVER_NAME }}" `
          -DatabaseName "DBA" `
          -UserName "${{ env.SQL_USER_NAME }}" `
          -Password "$retrievedPassword" `
          -SqlPackagePath "${{ env.SQLPACKAGE_DIR }}\sqlpackage.exe"
      shell: powershell

    - name: Verify DACPAC
      run: |
        echo "Listing files in dacpacs directory:"
        ls -l "${{ github.workspace }}/dacpacs"
      shell: bash


-----------------------

Refreshing environment variables from the registry for powershell.exe. Please wait...
Finished
Refreshing environment variables from the registry for powershell.exe. Please wait...
Finished
Script started. Action: DeployReport
Test-Path : Cannot bind argument to parameter 'Path' because it is an empty string.
At C:\actions-runner\_work\expenses-employee-invitation-api\expenses-employee-invitation-api\od-gha-files\sqlpackage-ru
nner-fixed.ps1:18 char:21
+ if (-not (Test-Path $SqlPackagePath)) {
+                     ~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidData: (:) [Test-Path], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : ParameterArgumentValidationErrorEmptyStringNotAllowed,Microsoft.PowerShell.Commands.Test 
   PathCommand
 
-OutputPath : The term '-OutputPath' is not recognized as the name of a cmdlet, function, script file, or operable 
program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At C:\actions-runner\_work\_temp\0e4fcb8d-0c85-4be8-a05f-49f36bdfd579.ps1:6 char:3
+   -OutputPath "C:\actions-runner\_work\expenses-employee-invitation-a ...
+   ~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (-OutputPath:String) [], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : CommandNotFoundException
 
Error: Process completed with exit code 1.

---------------------------

param (
    [string]$Action,
    [string]$DacpacPath,
    [string]$PublishProfilePath = "",
    [string]$ServerInstance,
    [string]$DatabaseName,
    [string]$UserName,
    [string]$Password,
    [string]$SqlPackagePath,
    [string]$OutputPath = ""
)

$ErrorActionPreference = "Stop"

Write-Host "Script started. Action: $Action"

# Validate sqlpackage.exe
if (-not (Test-Path $SqlPackagePath)) {
    throw "sqlpackage.exe not found at: $SqlPackagePath"
}

# Ensure output folder exists
if ($OutputPath -ne "") {
    $folder = Split-Path -Path $OutputPath -Parent
    if (-not (Test-Path $folder)) {
        Write-Host "Creating output directory: $folder"
        New-Item -Path $folder -ItemType Directory -Force | Out-Null
    }
}

# Build connection string
$ConnectionString = "Server=$ServerInstance;Database=$DatabaseName;User=$UserName;Password=$Password;Encrypt=True;TrustServerCertificate=True;"

# Initialize params
$params = @()

switch ($Action.ToLower()) {
    "extract" {
        if (-not $OutputPath) { throw "OutputPath is required for Extract" }
        $params = @(
            "/Action:Extract",
            "/TargetFile:$OutputPath",
            "/SourceConnectionString:$ConnectionString"
        )
    }
    "deployreport" {
        if (-not $OutputPath -or -not $DacpacPath) { throw "OutputPath and DacpacPath required for DeployReport" }
        $params = @(
            "/Action:DeployReport",
            "/SourceFile:$DacpacPath",
            "/TargetConnectionString:$ConnectionString",
            "/OutputPath:$OutputPath"
        )
        if ($PublishProfilePath) { $params += "/Profile:$PublishProfilePath" }
    }
    "script" {
        if (-not $OutputPath -or -not $DacpacPath) { throw "OutputPath and DacpacPath required for Script" }
        $params = @(
            "/Action:Script",
            "/SourceFile:$DacpacPath",
            "/TargetConnectionString:$ConnectionString",
            "/OutputPath:$OutputPath"
        )
        if ($PublishProfilePath) { $params += "/Profile:$PublishProfilePath" }
    }
    "publish" {
        if (-not $DacpacPath) { throw "DacpacPath required for Publish" }
        $params = @(
            "/Action:Publish",
            "/SourceFile:$DacpacPath",
            "/TargetConnectionString:$ConnectionString"
        )
        if ($PublishProfilePath) { $params += "/Profile:$PublishProfilePath" }
    }
    default { throw "Unsupported Action: $Action" }
}

# Execute
Write-Host "Running sqlpackage with: $params"
& $SqlPackagePath $params

if ($LASTEXITCODE -ne 0) {
    throw "sqlpackage failed with exit code $LASTEXITCODE"
}
Write-Host "Completed successfully"
