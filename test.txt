# $SqlPackageFilePath="C:\Program Files (x86)\Microsoft SQL Server\140\DAC\bin\SqlPackage.exe"
$SqlPackageFilePath="C:\Program Files (x86)\Microsoft SQL Server\130\DAC\bin\SqlPackage.exe"
#split out target servers
$targetServerCollection = @()
$targetServerCollection = $TargetServers -split ","
Write-Verbose "Target Server Collection: $targetServerCollecton"

#split out database names
$databaseNameCollection = @()
$databaseNameCollection = $DatabaseNames -split ","
Write-Verbose "Database Collection: $databaseNameCollection"

Write-Output "Processing starting..."

$SecurePassword = ConvertTo-SecureString -String $SQL_PASSWORD -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $SQL_PASSWORD, $SecurePassword

foreach ($targetServer in $targetServerCollection) {
    foreach ($databaseName in $databaseNameCollection) {

        # $sqlPackageCommand = "/Action:$Action /SourceServerName:$targetServer /SourceDatabaseName:$databaseName /TargetFile:C:/test.dacpac"
        # $fullCommand = "& `"$SqlPackageFilePath`" $sqlPackageCommand"
        # Write-Output "Executing full sqlpackage.exe command: $fullCommand"

        # Construct the connection string with SQL_USER and SQL_PASSWORD
        $connectionString = "Server=$targetServer;Database=$databaseName;User ID=$SQL_USER;Password=$($Credential.GetNetworkCredential().Password);"

        # Construct the sqlpackage command, including only the SourceConnectionString (without SourceServerName and SourceDatabaseName)
        $sqlPackageCommand = "/Action:$Action /TargetFile:C:/test.dacpac /SourceConnectionString:`"$connectionString`""

        # Create the full command
        $fullCommand = "& `"$SqlPackageFilePath`" $sqlPackageCommand"

        # Execute the command
        Invoke-Expression $fullCommand
    }
}

Write-Output "Processing Complete."
