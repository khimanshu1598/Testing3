# .github/workflows/test-reusable-action.yml

name: Test PostgreSQL Deploy Action (Success/Failure Paths - Pre-existing DB)

# This workflow is triggered on pull requests to any branch.
on:
  push:
    paths:
    - 'paassql-pipelines/deploy-postgresql/**'
    - '.github/workflows/test-deploy-postgresql.yaml'

jobs:
  # This job will run tests where the action is expected to complete successfully.
  prerequisites:
    environment: test
    runs-on: [ self-hosted, windows, runners-us-west-2 ]
    env:
      DBPACKAGE_FOLDER: dbdeploy-extracted
      SCRIPT_EXTRACTED_FOLDER: script-extracted
    steps:
    - name: "Checkout"
      uses: actions/checkout@v4

    # Downloads the DBUp NuGet package required for applying database changes during deployment
    - name: DBUp Package
      id: dbup-package
      uses: ./paassql-pipelines/package-download
      with:
        target-directory: ${{ github.workspace }}
        db-package: dbdeploy.1.1.10.nupkg
        dbpackage-target-dir: ${{ github.workspace }}\${{ env.DBPACKAGE_FOLDER }}
        task-name: package-download
        debug-verbose: false

    # Downloads the PowerShell scripts that need to be executed on the database
    - name: Scripts Package
      id: scripts-package
      uses: ./paassql-pipelines/package-download
      with:
        target-directory: ${{ github.workspace }}
        subfolder: PR539
        script-name: expense-transcription-db-change-scripts.0.0.69
        script-target-dir: ${{ github.workspace }}\${{ env.SCRIPT_EXTRACTED_FOLDER }}
        task-name: script-download
        debug-verbose: true

    - name: Dependencies as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dependencies
        path: |
          ${{ github.workspace }}\${{ env.DBPACKAGE_FOLDER }}
          ${{ github.workspace }}\${{ env.SCRIPT_EXTRACTED_FOLDER }}

  success-path-dry-run:
    environment: test
    runs-on: [ self-hosted, windows, runners-us-west-2 ]
    needs: prerequisites
    steps:

    - name: Download dependencies
      uses: actions/download-artifact@v4
      with:
        name: dependencies
        path: .

    - name: Deploy Database - Dry Run
      id: deploy-database-dry-run
      uses: ./paassql-pipelines/deploy-postgresql
      with:
        db_host: ${{ vars.ND_DB_HOST }}
        db_name: ${{ vars.ND_DB_NAME }}
        db_username: ${{ vars.ND_DB_USERNAME }}
        db_password: ${{ secrets.ND_DB_PASSWORD }}
        create-new-database: false
        dbpackage-target-dir: dbdeploy-extracted
        script-folder: script-extracted
        reports-folder: script-extracted/Reports
        dry-run: true
        debug-verbose: true
      env:
        powershell_script_path: ".github/scripts"

    - name: Verify Action Log for Connection Success (Outcome Check)
        # This step verifies that the 'Deploy Database - Dry Run' step completed successfully.
        # If your action's internal script (deploydb.ps1) logs "Successfully connected..."
        # and exits with a success code, then the step.outcome will be 'success'.
      if: ${{ steps.deploy-database-dry-run.outcome == 'success' }}
      run: |
        Write-Host "The 'Deploy Database - Dry Run' step completed successfully, indicating a successful connection was made and logged by the action itself."
        shell: powershell

  missing-db-host:
    runs-on: [ self-hosted, windows, runners-us-west-2 ]
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Test missing db_host
      id: run_missing
      uses: ./paassql-pipelines/deploy-postgresql
      with:
        db_host: ""
        db_name: ${{ vars.ND_DB_NAME }}
        db_username: ${{ vars.ND_DB_USERNAME }}
        db_password: ${{ secrets.ND_DB_PASSWORD }}
        create-new-database: false
        dbpackage-target-dir: dbdeploy-extracted
        script-folder: script-extracted
        reports-folder: ${{ github.workspace }}\script-extracted\Reports
        dry-run: true
        debug-verbose: true
      env:
        powershell_script_path: ".github/scripts"

    - name: Verify failure
      if: ${{ !cancelled() && steps.run_missing.outcome != 'failure' }}
      shell: powershell
      run: |
        Write-Error "Expected failure for missing db_host did not happen"
        exit 1

Its failing in Deploy Database - Run with the below error:

Run cd dbdeploy-extracted
Refreshing environment variables from the registry for powershell.exe. Please wait...
Finished
The argument 'C:\actions-runner\_work\dacpac-actions\dacpac-actions\paassql-pipelines\deploy-postgressql\deploydb.ps1' to the -File parameter does not exist. Provide the path to an existing '.ps1' file as an argument to the -File parameter.
Windows PowerShell 
Copyright (C) Microsoft Corporation. All rights reserved.


- name: Find deploydb.ps1 location
  run: |
    Write-Host "Searching for deploydb.ps1 in workspace..."
    $scriptPath = Get-ChildItem -Path "${{ github.workspace }}" -Recurse -Filter "deploydb.ps1" -ErrorAction SilentlyContinue | Select-Object -First 1 -ExpandProperty FullName
    
    if ($scriptPath) {
      Write-Host "Found deploydb.ps1 at: $scriptPath"
      # Optionally set it as an output for later steps
      echo "script_location=$scriptPath" >> $env:GITHUB_OUTPUT
    } else {
      Write-Error "ERROR: deploydb.ps1 not found anywhere in the workspace!"
      # List all files for debugging
      Write-Host "Workspace structure:"
      Get-ChildItem -Path "${{ github.workspace }}" -Recurse | Format-Table FullName
      exit 1
    }
  shell: powershell
