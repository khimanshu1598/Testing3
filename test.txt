    - name: Transfer Script to EC2 and Save in C:\Temp\EmployeeInvitation
      shell: pwsh
      run: |
        $encoded = "${{ steps.encode.outputs.scriptEncoded }}"

        $commands = @(
          "if (!(Test-Path 'C:\Temp\EmployeeInvitation')) { New-Item -ItemType Directory -Path 'C:\Temp\EmployeeInvitation' | Out-Null } else { Get-ChildItem -Path 'C:\Temp\EmployeeInvitation' -Recurse -Force | Remove-Item -Force -Recurse }",
          "`$decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('$encoded'))",
          "Set-Content -Path 'C:\Temp\EmployeeInvitation\sql-actions.ps1' -Value `$decoded -Force",
          "Write-Host '✅ sql-actions.ps1 transferred successfully'"
        )

        # ✅ FIXED: Use parentheses before -join
        $commandJson = ($commands | ForEach-Object { "`"`$_`"" }) -join ","

        $commandId = aws ssm send-command `
          --document-name "AWS-RunPowerShellScript" `
          --instance-ids "${{ inputs.instance_id }}" `
          --region "${{ inputs.region }}" `
          --parameters "commands=[$commandJson]" `
          --comment "Uploading sql-actions.ps1 to EC2" `
          --query "Command.CommandId" `
          --output text

        Write-Host "Command ID: $commandId"

        aws ssm wait command-executed `
          --region "${{ inputs.region }}" `
          --command-id $commandId `
          --instance-id "${{ inputs.instance_id }}"





-----------------

jobs:
  deploy:
    runs-on: windows-latest
    steps:
      # Your existing steps...
      
      - name: Send sql-actions.ps1 to target server
        uses: ./.github/actions/send-file-via-ssm  # Assuming you save the action here
        with:
          file-path: './od-gha-files/sql-actions.ps1'
          instance-id: 'your-ec2-instance-id'
          destination-path: 'C:\Temp'
          
      - name: Verify file on target server
        shell: pwsh
        run: |
          $result = aws ssm send-command `
            --instance-ids "your-ec2-instance-id" `
            --document-name "AWS-RunPowerShellScript" `
            --parameters "commands=[Test-Path 'C:\Temp\sql-actions.ps1'; Get-Item 'C:\Temp\sql-actions.ps1' | Select-Object -Property FullName,Length,LastWriteTime]" `
            --output json
          
          $commandResult = $result | ConvertFrom-Json
          $commandId = $commandResult.Command.CommandId
          
          # Wait a few seconds for command to complete
          Start-Sleep -Seconds 5
          
          $output = aws ssm get-command-invocation `
            --command-id $commandId `
            --instance-id "your-ec2-instance-id" `
            --output json | ConvertFrom-Json
          
          Write-Host "File verification output:"
          Write-Host $output.StandardOutputContent
          
          if ($output.Status -ne 'Success') {
            throw "File verification failed"
          }

----------------

Finished
ForEach-Object : Cannot bind parameter 'RemainingScripts'. Cannot convert the "-join" value of type "System.String" to 
type "System.Management.Automation.ScriptBlock".
At C:\actions-runner\_work\_temp\1d504db8-a87b-4013-b6b6-2cf906a3ee29.ps1:11 char:28
+ $commandJson = $commands | ForEach-Object { "`"`$_`"" } -join ","
+                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [ForEach-Object], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : CannotConvertArgumentNoMessage,Microsoft.PowerShell.Commands.ForEachObjectCommand
 
Error: Process completed with exit code 1.

  #     echo "VERIFY_FILE_TRANSFER_COMMAND_ID=$command_id" >> $GITHUB_ENV
  #     aws ssm wait command-executed --region "${{ inputs.aws_region }}" --command-id "$command_id" --instance-id "$INSTANCE_ID"
