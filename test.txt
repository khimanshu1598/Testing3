name: "Send PowerShell Script to EC2 via SSM"
description: "Uploads a single PowerShell script to a Windows EC2 instance via SSM and saves it under C:\\Temp\\EmployeeInvitation"
inputs:
  script_path:
    description: "Path to the PowerShell script"
    required: true
  instance_id:
    description: "Target EC2 instance ID"
    required: true
  region:
    description: "AWS region"
    required: true
runs:
  using: "composite"
  steps:
    - name: Encode PowerShell Script to Base64
      id: encode
      shell: pwsh
      run: |
        $script = Get-Content "${{ inputs.script_path }}" -Raw
        $encoded = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($script))
        "scriptEncoded=$encoded" >> $env:GITHUB_OUTPUT

    - name: Transfer Script to EC2 and Save in C:\Temp\EmployeeInvitation
      shell: pwsh
      run: |
        $encoded = "${{ steps.encode.outputs.scriptEncoded }}"

        $commands = @(
          "if (!(Test-Path 'C:\Temp\EmployeeInvitation')) { New-Item -Path 'C:\Temp\EmployeeInvitation' -ItemType Directory | Out-Null } else { Get-ChildItem 'C:\Temp\EmployeeInvitation' -Recurse -Force | Remove-Item -Force -Recurse }",
          "`$script = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('$encoded'))",
          "Set-Content -Path 'C:\Temp\EmployeeInvitation\sql-actions.ps1' -Value `$script -Force",
          "Write-Host 'âœ… sql-actions.ps1 transferred successfully'"
        )

        $commandJson = $commands | ForEach-Object { "`"`$_`"" } | Out-String
        $commandJson = $commandJson -replace '\r?\n', ','

        $commandId = aws ssm send-command `
          --document-name "AWS-RunPowerShellScript" `
          --instance-ids "${{ inputs.instance_id }}" `
          --region "${{ inputs.region }}" `
          --parameters @{ commands = @($commandJson) } `
          --query "Command.CommandId" `
          --output text

        echo "Command ID: $commandId"



-----------------

jobs:
  deploy:
    runs-on: windows-latest
    steps:
      # Your existing steps...
      
      - name: Send sql-actions.ps1 to target server
        uses: ./.github/actions/send-file-via-ssm  # Assuming you save the action here
        with:
          file-path: './od-gha-files/sql-actions.ps1'
          instance-id: 'your-ec2-instance-id'
          destination-path: 'C:\Temp'
          
      - name: Verify file on target server
        shell: pwsh
        run: |
          $result = aws ssm send-command `
            --instance-ids "your-ec2-instance-id" `
            --document-name "AWS-RunPowerShellScript" `
            --parameters "commands=[Test-Path 'C:\Temp\sql-actions.ps1'; Get-Item 'C:\Temp\sql-actions.ps1' | Select-Object -Property FullName,Length,LastWriteTime]" `
            --output json
          
          $commandResult = $result | ConvertFrom-Json
          $commandId = $commandResult.Command.CommandId
          
          # Wait a few seconds for command to complete
          Start-Sleep -Seconds 5
          
          $output = aws ssm get-command-invocation `
            --command-id $commandId `
            --instance-id "your-ec2-instance-id" `
            --output json | ConvertFrom-Json
          
          Write-Host "File verification output:"
          Write-Host $output.StandardOutputContent
          
          if ($output.Status -ne 'Success') {
            throw "File verification failed"
          }

----------------

Refreshing environment variables from the registry for powershell.exe. Please wait...
Finished
Error parsing parameter '--parameters': Expected: ',', received: ''' for input:
 commands=['if (-not (Test-Path ''C:\Temp\EmployeeInvitation'')) { 
                                ^
  New-Item -ItemType Directory -Path ''C:\Temp\EmployeeInvitation'' -Force | Out-Null 
}
Remove-Item C:\Temp\EmployeeInvitation\sql-actions.ps1.tmp -ErrorAction SilentlyContinue']
Error: Process completed with exit code 1.

----------------------

#     echo "Transferring files to target EC2 instance..."
  #     remote_script_file="C:/Temp/dacpac-utility.ps1"
  #     remote_uat_file="C:/Temp/uat.ps1"

  #     command_id=$(aws ssm send-command \
  #       --region "${{ inputs.aws_region }}" \
  #       --instance-ids "$INSTANCE_ID" \
  #       --document-name "AWS-RunPowerShellScript" \
  #       --parameters commands="[
  #         \"Write-Host 'Creating Temp Directory...'\",
  #         \"New-Item -Path C:/Temp -ItemType Directory -Force\",
  #         \"[Text.Encoding]::Utf8.GetString([Convert]::FromBase64String('$(base64 -w 0 "${{ inputs.script_path }}")')) | Out-File '$remote_script_file'\",
  #         \"[Text.Encoding]::Utf8.GetString([Convert]::FromBase64String('$(base64 -w 0 "${{ inputs.config_path }}")')) | Out-File '$remote_uat_file'\",
  #         \"Write-Host 'Scripts transferred successfully'\"
  #       ]" \
  #       --timeout-seconds 300 \
  #       --max-concurrency "50" \
  #       --max-errors "0" \
  #       --query "Command.CommandId" \
  #       --output text)

  #     echo "TRANSFER_FILES_COMMAND_ID=$command_id" >> $GITHUB_ENV
  #     aws ssm wait command-executed --region "${{ inputs.aws_region }}" --command-id "$command_id" --instance-id "$INSTANCE_ID"

  # - name: "Verify File Transfer on Target Instance"
  #   shell: bash
  #   run: |
  #     command_id=$(aws ssm send-command \
  #       --region "${{ inputs.aws_region }}" \
  #       --instance-ids "$INSTANCE_ID" \
  #       --document-name "AWS-RunPowerShellScript" \
  #       --parameters commands="[
  #         \"if (Test-Path 'C:/Temp/dacpac-utility.ps1') { Write-Host 'dacpac-utility.ps1 exists' } else { Write-Host 'ERROR: dacpac-utility.ps1 missing!'; exit 1 }\",
  #         \"if (Test-Path 'C:/Temp/uat.ps1') { Write-Host 'uat.ps1 exists' } else { Write-Host 'ERROR: uat.ps1 missing!'; exit 1 }\"
  #       ]" \
  #       --timeout-seconds 300 \
  #       --max-concurrency "50" \
  #       --max-errors "0" \
  #       --query "Command.CommandId" \
  #       --output text)

  #     echo "VERIFY_FILE_TRANSFER_COMMAND_ID=$command_id" >> $GITHUB_ENV
  #     aws ssm wait command-executed --region "${{ inputs.aws_region }}" --command-id "$command_id" --instance-id "$INSTANCE_ID"
