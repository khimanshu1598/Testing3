name: "Send PS1 to EC2 via SSM"
description: "Sends a PowerShell script to EC2 and saves it in C:\\Temp\\EmployeeInvitation via AWS SSM"
inputs:
  script_path:
    description: "Relative path to the PowerShell script"
    required: true
  instance_id:
    description: "Target EC2 Instance ID"
    required: true
  region:
    description: "AWS Region"
    required: true
runs:
  using: "composite"
  steps:
    - name: Encode PowerShell script
      id: encode
      shell: pwsh
      run: |
        $content = Get-Content "${{ inputs.script_path }}" -Raw
        $base64 = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($content))
        echo "encoded=$base64" >> $env:GITHUB_OUTPUT

    - name: Send script to EC2 and save in C:\Temp\EmployeeInvitation
      shell: pwsh
      run: |
        $encoded = "${{ steps.encode.outputs.encoded }}"

        $commands = @"
\$base64 = '${encoded}'
\$decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\$base64))

# Ensure directory exists and is clean
\$targetDir = 'C:\Temp\EmployeeInvitation'
if (!(Test-Path -Path \$targetDir)) {
  New-Item -ItemType Directory -Path \$targetDir | Out-Null
} else {
  Get-ChildItem -Path \$targetDir -Recurse -Force | Remove-Item -Force -Recurse
}

Set-Content -Path "\$targetDir\sql-actions.ps1" -Value \$decoded -Force
"@

        $commandId = aws ssm send-command `
          --document-name "AWS-RunPowerShellScript" `
          --instance-ids "${{ inputs.instance_id }}" `
          --region "${{ inputs.region }}" `
          --parameters commands=["$commands"] `
          --comment "Create/Clean EmployeeInvitation dir and send script" `
          --query "Command.CommandId" `
          --output text

        echo "Command ID: $commandId"
