name: 'Send file to EC2 via SSM'
description: 'Send a local file to an EC2 instance via AWS SSM'
inputs:
  file-path:
    description: 'Path to the local file to send'
    required: true
  instance-id:
    description: 'Target EC2 instance ID'
    required: true
  destination-path:
    description: 'Destination path on the target server'
    required: true
    default: 'C:\Temp'
runs:
  using: 'composite'
  steps:
    - name: Read and encode file content
      id: encode_file
      shell: pwsh
      run: |
        # Read file content and convert to base64
        $content = Get-Content -Path "${{ inputs.file-path }}" -Raw -Encoding UTF8
        $base64Content = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($content))
        echo "::set-output name=content::$base64Content"
        
    - name: Create SSM command
      id: create_command
      shell: pwsh
      run: |
        # Create the PowerShell command that will run on the target
        $psCommand = @"
        `$bytes = [System.Convert]::FromBase64String('${{ steps.encode_file.outputs.content }}')
        `$content = [System.Text.Encoding]::UTF8.GetString(`$bytes)
        if (-not (Test-Path '${{ inputs.destination-path }}')) {
            New-Item -ItemType Directory -Path '${{ inputs.destination-path }}' -Force | Out-Null
        }
        Set-Content -Path "${{ inputs.destination-path }}\$(Split-Path -Leaf '${{ inputs.file-path }}')" -Value `$content -Encoding UTF8 -Force
        "@

        # Properly escape for JSON
        $escapedCommand = $psCommand -replace '"', '\"' -replace "`n", " "
        $parameters = @{
            commands = @($escapedCommand)
        } | ConvertTo-Json -Compress -Depth 10
        
        echo "::set-output name=parameters::$($parameters -replace '"', '\"')"
        
    - name: Send file via SSM
      shell: pwsh
      run: |
        aws ssm send-command `
          --instance-ids "${{ inputs.instance-id }}" `
          --document-name "AWS-RunPowerShellScript" `
          --parameters '${{ steps.create_command.outputs.parameters }}' `
          --output text


-----------------

jobs:
  deploy:
    runs-on: windows-latest
    steps:
      # Your existing steps...
      
      - name: Send sql-actions.ps1 to target server
        uses: ./.github/actions/send-file-via-ssm  # Assuming you save the action here
        with:
          file-path: './od-gha-files/sql-actions.ps1'
          instance-id: 'your-ec2-instance-id'
          destination-path: 'C:\Temp'
          
      - name: Verify file on target server
        shell: pwsh
        run: |
          $result = aws ssm send-command `
            --instance-ids "your-ec2-instance-id" `
            --document-name "AWS-RunPowerShellScript" `
            --parameters "commands=[Test-Path 'C:\Temp\sql-actions.ps1'; Get-Item 'C:\Temp\sql-actions.ps1' | Select-Object -Property FullName,Length,LastWriteTime]" `
            --output json
          
          $commandResult = $result | ConvertFrom-Json
          $commandId = $commandResult.Command.CommandId
          
          # Wait a few seconds for command to complete
          Start-Sleep -Seconds 5
          
          $output = aws ssm get-command-invocation `
            --command-id $commandId `
            --instance-id "your-ec2-instance-id" `
            --output json | ConvertFrom-Json
          
          Write-Host "File verification output:"
          Write-Host $output.StandardOutputContent
          
          if ($output.Status -ne 'Success') {
            throw "File verification failed"
          }

----------------

Refreshing environment variables from the registry for powershell.exe. Please wait...
Finished
At C:\actions-runner\_work\_temp\bfd336c7-1416-4b68-b013-67d92870f7df.ps1:14 char:65
+   --parameters "{\"commands\":[\"$($command -replace '"', '\"')]}" `
+                                                                 ~
Unexpected token '}' in expression or statement.
At C:\actions-runner\_work\_temp\bfd336c7-1416-4b68-b013-67d92870f7df.ps1:14 char:66
+   --parameters "{\"commands\":[\"$($command -replace '"', '\"')]}" `
+                                                                  ~~~
The string is missing the terminator: ".
    + CategoryInfo          : ParserError: (:) [], ParseException
    + FullyQualifiedErrorId : UnexpectedToken

