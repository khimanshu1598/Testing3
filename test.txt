name: 'Build Output path and Run the DACPAC Deployment script'
description: 'Using sqlpacakge.exe to run DACPAC operations - Deployreport, script, extract & publish'

inputs:
  ArtifactDownloadPath:
    description: 'Path where the Artifacts will be stored'
    required: true
  DatabaseName:
    description: 'The database name the DACPAC is being applied against'
    required: true
  ReleaseNumber:
    description: 'Release Number of the build'
    required: true
  FileName:
    description: 'The name of Output File'
    required: true
  targetServer:
    description: 'The host to deploy the DACPAC to'
    required: true
  Action:
    description: 'The action to have sqlpackage.exe execute. One of: extract, deployreport, script, publish'
    required: true
  PublishProfileFilePath:
    description: 'The fully qualified path and file name of the Publish Profile to be applied against the supplied DACPAC'
    required: true
  GithubActor:
    description: 'Returns the username of the person or app that triggered the workflow run.'
    required: true
  SQLPackageDeployProperties:
    description: 'Collection of SQLPackage.exe Properties in JSON format eg {"PropertyName":"PropertyValue","PropertyTwoName":"PropertyTwoValue"}'
    required: true
  SQLCMDVariables:
    description: 'Collection of SQLCMD Variables in JSON format eg {"VariableName":"VariableValue","VariableTwoName":"VariableTwoValue"}'
    required: true
  SQLPackageParameters:
    description: 'Collection of SQLPackage.exe Parameters in JSON format eg {"ParameterName":"ParameterValue","ParameterTwoName":"ParameterTwoValue"}'
    required: true
  SqlPackagePath:
    description: 'Path to sqlpackage.exe'
    required: true
  DacpacPath:
    description: '[Optional] The fully qualified path and file name of the DACPAC to publish.'
    required: false
  UserName:
    description: 'SQL username to be used for performing actions'
    required: true

runs:
  using: composite
  steps:
  - name: Build Output path and Run the DACPAC Deployment script
    shell: powershell
    env:
      ArtifactDownloadPath: ${{ inputs.ArtifactDownloadPath }}
      DatabaseName: ${{ inputs.DatabaseName }}
      ReleaseNumber: ${{ inputs.ReleaseNumber }}
      FileName: ${{ inputs.FileName }}
      targetServer: ${{ inputs.TargetServer }} # optional, if used
      Action: ${{ inputs.Action }}
      PublishProfileFilePath: ${{ inputs.PublishProfileFilePath }}
      GithubActor: ${{ github.actor }}
      SQLPackageDeployProperties: ${{ inputs.SQLPackageDeployProperties }}
      SQLCMDVariables: ${{ inputs.SQLCMDVariables }}
      SQLPackageParameters: ${{ inputs.SQLPackageParameters }}
    run: |
      # Replace #{Octopus.Release.Number} with release number in SQLCMDVariables
      $SQLCMDVariablesUpdated = $env:SQLCMDVariables -replace '#{Octopus.Release.Number}', $env:ReleaseNumber

      function Format-JsonAsKeyValue {
          param (
              [string]$jsonString
          )

          # Check if the JSON string is empty or null
          if ([string]::IsNullOrEmpty($jsonString.Trim())) {
              Write-Host "Warning: JSON string is empty or null. Returning empty string."
              return "" # Or you can return $null or some other value if needed.
          }
          try {
          # Convert JSON string to PowerShell object
          $jsonObject = $jsonString | ConvertFrom-Json
          if ($null -eq $jsonObject) {
            Write-Host "Error: The JSON string is invalid and could not be converted."
            return ""  # Return empty string if the conversion results in null
          }
          } catch {
          Write-Host "Warning: Invalid JSON format. Returning empty string."
          return ""  # Return empty string if there's an error in parsing JSON
          }

          # Format each property as key='value' and join them with commas
          $formattedString = ($jsonObject.psobject.Properties | ForEach-Object { "$($_.Name)='$($_.Value)'" }) -join ","

          return $formattedString
      }

      $parsedSqlPackageDeployPropertiesJson = Format-JsonAsKeyValue -jsonString $env:SQLPackageDeployProperties
      $parsedSqlCMDVariablesJson = Format-JsonAsKeyValue -jsonString $SQLCMDVariablesUpdated
      $parsedSqlPackageParametersJson = Format-JsonAsKeyValue -jsonString $env:SQLPackageParameters

      # Write-Host "parsedSqlPackageDeployPropertiesJson: $parsedSqlPackageDeployPropertiesJson"
      # Write-Host "parsedSqlCMDVariablesJson: $parsedSqlCMDVariablesJson"
      # Write-Host "parsedSqlPackageParametersJson: $parsedSqlPackageParametersJson"

      # Added the lines from 106 to 115 for testing

      # ✅ Validate that FileName is provided
      if ([string]::IsNullOrWhiteSpace($env:FileName)) {
          throw "FileName input is missing. It is required to build OutputPath."
      }

      # ✅ Validate that MATRIX_INSTANCE_LIST is provided
      if ([string]::IsNullOrWhiteSpace($env:MATRIX_INSTANCE_LIST)) {
          throw "MATRIX_INSTANCE_LIST is empty or missing. Cannot proceed with DACPAC deployment."
      }

      $matrixJson = "$env:MATRIX_INSTANCE_LIST"
      if (-not ($matrixJson.Trim().StartsWith('['))) {
          Write-Host "Wrapping single JSON object in an array..."
          $matrixJson = @($matrixJson | ConvertFrom-Json) | ConvertTo-Json -Compress
      }

      Write-Host "Raw MATRIX_INSTANCE_LIST: $matrixJson"
      $parsedMatrix = $matrixJson | ConvertFrom-Json
      $allOutputPaths = ""

      foreach ($item in $parsedMatrix) {
          $instance = $item.instance
          $dbServer = $item.dbServerName
          $role = $item.role
          Write-Host ("Run the Action `${{ inputs.Action }} to - Instance: {0}, Role: {1}, DB Server: {2}" -f $instance, $role, $dbServer)

          $OutputFilePath = ""
          if ($env:Action -in @("DeployReport", "Script")) {
              $OutputFolder = Join-Path $env:ArtifactDownloadPath "deployreports"
              $OutputFileName = "$($env:DatabaseName).$($env:ReleaseNumber).$role.$($env:FileName)"
              $OutputFilePath = Join-Path $OutputFolder $OutputFileName

              $outputFileNameOnly = Split-Path $OutputFilePath -Leaf
              $outputDirectoryOnly = Split-Path $OutputFilePath -Parent

              $sanitizedTargetServer = $env:targetServer.TrimEnd('.')
              $outputFileNameOnlyWithDB = $outputFileNameOnly.Replace('[DatabaseName]', $env:DatabaseName).TrimStart('.')
              $OutputFilePath = Join-Path $outputDirectoryOnly "$sanitizedTargetServer.$outputFileNameOnlyWithDB"
              $env:outputPath = "$OutputFilePath"
              if (!(Test-Path (Split-Path $OutputFilePath))) {
                  New-Item -ItemType Directory -Path (Split-Path $OutputFilePath) -Force
              }
              $allOutputPaths += "$OutputFilePath,"
              $env:outputPath = "$OutputFilePath"
          }

          # Update DBVersion variable in publish profile
          $xml = [xml](Get-Content $env:PublishProfileFilePath)
          $xml.Project.ItemGroup.SqlCmdVariable | Where-Object { $_.Include -eq 'DBVersion' } | ForEach-Object {
              $_.Value = "$env:RELEASE_NUMBER - GitHub Actions by $env:GITHUB_ACTOR ($env:GITHUB_ACTOR)"
          }
          $xml.Save($env:PublishProfileFilePath)

          # Write-Host "Formatted SQLPackageDeployProperties inside loop: $parsedSqlPackageDeployPropertiesJson"

          & $env:scriptPath `
              -Action "${{ inputs.Action }}" `
              -DacpacPath "${{ inputs.DacpacPath }}" `
              -OutputPath "$OutputFilePath" `
              -ServerInstance "$dbServer" `
              -DatabaseName "${{ inputs.DatabaseName }}" `
              -UserName "${{ inputs.UserName }}" `
              -Password $env:retrievedPassword `
              -SqlPackagePath "${{ inputs.SqlPackagePath }}" `
              -PublishProfilePath "${{ inputs.PublishProfileFilePath }}" `
              -UseMultiSubnetFailover "${{ inputs.UseMultiSubnetFailover }}" `
              -SQLPackageDeployProperties "$parsedSqlPackageDeployPropertiesJson" `
              -SQLCmdVariables "$parsedSqlCMDVariablesJson" `
              -SQLPackageParameters "$parsedSqlPackageParametersJson"
      }

      if ($env:Action -in @("DeployReport", "Script")) {
          $allOutputPaths = $allOutputPaths.TrimEnd(',')
          # Write-Host "allOutputPaths: $allOutputPaths"
          "OutPutPath=$allOutputPaths" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        }
